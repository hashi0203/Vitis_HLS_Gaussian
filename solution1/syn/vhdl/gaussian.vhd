-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gaussian is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_strm_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_strm_TVALID : IN STD_LOGIC;
    in_strm_TREADY : OUT STD_LOGIC;
    in_strm_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_strm_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_strm_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_strm_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_strm_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in_strm_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_strm_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_strm_TVALID : OUT STD_LOGIC;
    out_strm_TREADY : IN STD_LOGIC;
    out_strm_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_strm_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_strm_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_strm_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_strm_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_strm_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of gaussian is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "gaussian_gaussian,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.427000,HLS_SYN_LAT=262673,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=976,HLS_SYN_LUT=1870,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv10_1FE : STD_LOGIC_VECTOR (9 downto 0) := "0111111110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_202 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000010";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv19_40000 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv29_1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_strm_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln18_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln25_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal icmp_ln50_fu_821_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_fu_956_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_strm_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal icmp_ln50_reg_1405 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_1405_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal icmp_ln50_reg_1405_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_379 : STD_LOGIC_VECTOR (2 downto 0);
    signal wx_reg_390 : STD_LOGIC_VECTOR (1 downto 0);
    signal wy_reg_401 : STD_LOGIC_VECTOR (1 downto 0);
    signal window_2_2_1_reg_412 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_2_1_1_reg_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_1_2_1_reg_436 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten7_reg_448 : STD_LOGIC_VECTOR (18 downto 0);
    signal py_reg_459 : STD_LOGIC_VECTOR (9 downto 0);
    signal px_2_reg_470 : STD_LOGIC_VECTOR (9 downto 0);
    signal val_last_V_1_reg_481 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_in_reg_492 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_in_reg_492_pp3_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op161_read_state9 : BOOLEAN;
    signal ap_block_state9_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state11_io : BOOLEAN;
    signal ap_block_state12_pp3_stage0_iter3 : BOOLEAN;
    signal ap_block_state12_io : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal val_in_reg_492_pp3_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal window_1_1_in_reg_504 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_1_0_reg_514 : STD_LOGIC_VECTOR (30 downto 0);
    signal window_2_1_reg_523 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_2_0_reg_535 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln18_fu_559_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal add_ln25_fu_570_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal add_ln32_fu_607_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state6_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln32_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1299 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1303 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_1_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_1_reg_1319 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln33_fu_659_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln32_fu_668_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln32_reg_1332 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal select_ln32_1_fu_681_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal window_2_2_13_fu_747_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_2_2_14_fu_755_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_2_2_15_fu_763_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln50_fu_789_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal empty_18_fu_807_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_18_reg_1400 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_18_reg_1400_pp3_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_1409 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_1409_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln41_2_fu_864_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln41_2_reg_1414 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mid1_fu_872_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_mid1_reg_1421 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_mid1_reg_1421_pp3_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln41_5_fu_886_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln41_5_reg_1426 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln41_5_reg_1426_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_fu_894_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln19_fu_908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1437 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1437_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln58_fu_914_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln58_reg_1444 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln58_reg_1444_pp3_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_reg_1450 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_last_V_fu_940_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_last_V_reg_1456 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_last_V_reg_1456_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal linebuf_0_addr_2_reg_1466 : STD_LOGIC_VECTOR (8 downto 0);
    signal window_1_1_fu_985_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal select_ln19_1_fu_1113_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln19_1_reg_1482 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_1_2_reg_1489 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_flush_enable : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_flush_enable : STD_LOGIC;
    signal ap_condition_pp3_exit_iter2_state11 : STD_LOGIC;
    signal linebuf_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal linebuf_0_ce0 : STD_LOGIC;
    signal linebuf_0_we0 : STD_LOGIC;
    signal linebuf_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_0_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal linebuf_0_ce1 : STD_LOGIC;
    signal linebuf_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal linebuf_1_ce0 : STD_LOGIC;
    signal linebuf_1_we0 : STD_LOGIC;
    signal linebuf_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal px_reg_292 : STD_LOGIC_VECTOR (9 downto 0);
    signal px_1_reg_303 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_phi_reg_314 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_phi22_reg_327 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_phi23_reg_340 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_phi24_reg_353 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_phi25_reg_366 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_px_2_phi_fu_474_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_val_last_V_1_phi_fu_485_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_val_in_phi_fu_495_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp3_iter0_val_in_reg_492 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_window_1_1_in_phi_fu_507_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_window_2_1_phi_fu_526_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_window_2_0_phi_fu_538_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln18_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_fu_582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_fu_647_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal zext_ln51_fu_902_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_2_2_2_fu_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_2_2_16_fu_771_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_0_0_1_fu_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_0_0_fu_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_0_1_fu_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_1_0_1_fu_180 : STD_LOGIC_VECTOR (30 downto 0);
    signal window_2_0_1_fu_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_cnt_fu_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_cnt_1_fu_962_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal select_ln32_fu_625_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln33_fu_633_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln35_fu_637_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln35_fu_643_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln32_1_fu_675_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln35_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_2_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln32_1_fu_688_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_1_1_1_fu_711_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln32_2_fu_704_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_2_2_11_fu_733_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_2_2_12_fu_740_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_2_2_fu_719_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_2_2_9_fu_726_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp63_mid1_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp63_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_0_mid1_fu_858_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_0_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_878_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_813_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln41_fu_836_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln41_1_fu_850_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_fu_928_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln64_fu_934_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_946_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal and_ln19_fu_1007_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln59_fu_1019_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln58_fu_1011_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln59_fu_1025_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln19_fu_1038_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_out_1_0_1_fu_1031_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln19_1_fu_1043_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln59_1_fu_1048_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln59_1_fu_1062_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln58_1_fu_1054_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln59_2_fu_1070_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln59_fu_1083_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln59_2_fu_1087_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln19_fu_1076_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln59_3_fu_1101_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln59_3_fu_1095_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln59_4_fu_1107_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln41_fu_1138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln19_2_fu_1143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln59_5_fu_1148_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln59_4_fu_1160_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln58_2_fu_1153_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln59_6_fu_1166_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln41_3_fu_1133_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln19_fu_1178_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal val_out_1_2_1_fu_1172_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_1183_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln59_7_fu_1191_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln58_3_fu_1197_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_1_fu_1213_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln23_fu_1223_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_4_fu_1205_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln27_fu_1227_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal val_data_V_fu_1233_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal regslice_both_out_strm_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal regslice_both_in_strm_V_data_V_U_apdone_blk : STD_LOGIC;
    signal in_strm_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal in_strm_TVALID_int_regslice : STD_LOGIC;
    signal in_strm_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in_strm_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_strm_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal in_strm_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_in_strm_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_strm_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_strm_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal in_strm_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_in_strm_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_strm_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_strm_V_user_V_U_apdone_blk : STD_LOGIC;
    signal in_strm_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_strm_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_strm_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_strm_V_last_V_U_apdone_blk : STD_LOGIC;
    signal in_strm_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_strm_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_strm_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_strm_V_id_V_U_apdone_blk : STD_LOGIC;
    signal in_strm_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_strm_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_strm_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_strm_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal in_strm_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_strm_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_strm_V_dest_V_U_ack_in : STD_LOGIC;
    signal out_strm_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal out_strm_TVALID_int_regslice : STD_LOGIC;
    signal out_strm_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_strm_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_strm_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_strm_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_strm_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_strm_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_strm_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_strm_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_strm_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_strm_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_strm_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_strm_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_strm_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_strm_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_strm_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_strm_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_strm_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_strm_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_strm_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_strm_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_condition_272 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component gaussian_linebuf_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gaussian_linebuf_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gaussian_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component gaussian_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    CONTROL_BUS_s_axi_U : component gaussian_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    linebuf_0_U : component gaussian_linebuf_0
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => linebuf_0_address0,
        ce0 => linebuf_0_ce0,
        we0 => linebuf_0_we0,
        d0 => linebuf_0_d0,
        q0 => linebuf_0_q0,
        address1 => linebuf_0_address1,
        ce1 => linebuf_0_ce1,
        q1 => linebuf_0_q1);

    linebuf_1_U : component gaussian_linebuf_1
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => linebuf_1_address0,
        ce0 => linebuf_1_ce0,
        we0 => linebuf_1_we0,
        d0 => linebuf_1_d0,
        q0 => linebuf_1_q0);

    regslice_both_in_strm_V_data_V_U : component gaussian_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_strm_TDATA,
        vld_in => in_strm_TVALID,
        ack_in => regslice_both_in_strm_V_data_V_U_ack_in,
        data_out => in_strm_TDATA_int_regslice,
        vld_out => in_strm_TVALID_int_regslice,
        ack_out => in_strm_TREADY_int_regslice,
        apdone_blk => regslice_both_in_strm_V_data_V_U_apdone_blk);

    regslice_both_in_strm_V_keep_V_U : component gaussian_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_strm_TKEEP,
        vld_in => in_strm_TVALID,
        ack_in => regslice_both_in_strm_V_keep_V_U_ack_in,
        data_out => in_strm_TKEEP_int_regslice,
        vld_out => regslice_both_in_strm_V_keep_V_U_vld_out,
        ack_out => in_strm_TREADY_int_regslice,
        apdone_blk => regslice_both_in_strm_V_keep_V_U_apdone_blk);

    regslice_both_in_strm_V_strb_V_U : component gaussian_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_strm_TSTRB,
        vld_in => in_strm_TVALID,
        ack_in => regslice_both_in_strm_V_strb_V_U_ack_in,
        data_out => in_strm_TSTRB_int_regslice,
        vld_out => regslice_both_in_strm_V_strb_V_U_vld_out,
        ack_out => in_strm_TREADY_int_regslice,
        apdone_blk => regslice_both_in_strm_V_strb_V_U_apdone_blk);

    regslice_both_in_strm_V_user_V_U : component gaussian_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_strm_TUSER,
        vld_in => in_strm_TVALID,
        ack_in => regslice_both_in_strm_V_user_V_U_ack_in,
        data_out => in_strm_TUSER_int_regslice,
        vld_out => regslice_both_in_strm_V_user_V_U_vld_out,
        ack_out => in_strm_TREADY_int_regslice,
        apdone_blk => regslice_both_in_strm_V_user_V_U_apdone_blk);

    regslice_both_in_strm_V_last_V_U : component gaussian_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_strm_TLAST,
        vld_in => in_strm_TVALID,
        ack_in => regslice_both_in_strm_V_last_V_U_ack_in,
        data_out => in_strm_TLAST_int_regslice,
        vld_out => regslice_both_in_strm_V_last_V_U_vld_out,
        ack_out => in_strm_TREADY_int_regslice,
        apdone_blk => regslice_both_in_strm_V_last_V_U_apdone_blk);

    regslice_both_in_strm_V_id_V_U : component gaussian_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_strm_TID,
        vld_in => in_strm_TVALID,
        ack_in => regslice_both_in_strm_V_id_V_U_ack_in,
        data_out => in_strm_TID_int_regslice,
        vld_out => regslice_both_in_strm_V_id_V_U_vld_out,
        ack_out => in_strm_TREADY_int_regslice,
        apdone_blk => regslice_both_in_strm_V_id_V_U_apdone_blk);

    regslice_both_in_strm_V_dest_V_U : component gaussian_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_strm_TDEST,
        vld_in => in_strm_TVALID,
        ack_in => regslice_both_in_strm_V_dest_V_U_ack_in,
        data_out => in_strm_TDEST_int_regslice,
        vld_out => regslice_both_in_strm_V_dest_V_U_vld_out,
        ack_out => in_strm_TREADY_int_regslice,
        apdone_blk => regslice_both_in_strm_V_dest_V_U_apdone_blk);

    regslice_both_out_strm_V_data_V_U : component gaussian_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_strm_TDATA_int_regslice,
        vld_in => out_strm_TVALID_int_regslice,
        ack_in => out_strm_TREADY_int_regslice,
        data_out => out_strm_TDATA,
        vld_out => regslice_both_out_strm_V_data_V_U_vld_out,
        ack_out => out_strm_TREADY,
        apdone_blk => regslice_both_out_strm_V_data_V_U_apdone_blk);

    regslice_both_out_strm_V_keep_V_U : component gaussian_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => p_phi_reg_314,
        vld_in => out_strm_TVALID_int_regslice,
        ack_in => regslice_both_out_strm_V_keep_V_U_ack_in_dummy,
        data_out => out_strm_TKEEP,
        vld_out => regslice_both_out_strm_V_keep_V_U_vld_out,
        ack_out => out_strm_TREADY,
        apdone_blk => regslice_both_out_strm_V_keep_V_U_apdone_blk);

    regslice_both_out_strm_V_strb_V_U : component gaussian_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => p_phi22_reg_327,
        vld_in => out_strm_TVALID_int_regslice,
        ack_in => regslice_both_out_strm_V_strb_V_U_ack_in_dummy,
        data_out => out_strm_TSTRB,
        vld_out => regslice_both_out_strm_V_strb_V_U_vld_out,
        ack_out => out_strm_TREADY,
        apdone_blk => regslice_both_out_strm_V_strb_V_U_apdone_blk);

    regslice_both_out_strm_V_user_V_U : component gaussian_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => p_phi23_reg_340,
        vld_in => out_strm_TVALID_int_regslice,
        ack_in => regslice_both_out_strm_V_user_V_U_ack_in_dummy,
        data_out => out_strm_TUSER,
        vld_out => regslice_both_out_strm_V_user_V_U_vld_out,
        ack_out => out_strm_TREADY,
        apdone_blk => regslice_both_out_strm_V_user_V_U_apdone_blk);

    regslice_both_out_strm_V_last_V_U : component gaussian_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => val_last_V_reg_1456_pp3_iter1_reg,
        vld_in => out_strm_TVALID_int_regslice,
        ack_in => regslice_both_out_strm_V_last_V_U_ack_in_dummy,
        data_out => out_strm_TLAST,
        vld_out => regslice_both_out_strm_V_last_V_U_vld_out,
        ack_out => out_strm_TREADY,
        apdone_blk => regslice_both_out_strm_V_last_V_U_apdone_blk);

    regslice_both_out_strm_V_id_V_U : component gaussian_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => p_phi24_reg_353,
        vld_in => out_strm_TVALID_int_regslice,
        ack_in => regslice_both_out_strm_V_id_V_U_ack_in_dummy,
        data_out => out_strm_TID,
        vld_out => regslice_both_out_strm_V_id_V_U_vld_out,
        ack_out => out_strm_TREADY,
        apdone_blk => regslice_both_out_strm_V_id_V_U_apdone_blk);

    regslice_both_out_strm_V_dest_V_U : component gaussian_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => p_phi25_reg_366,
        vld_in => out_strm_TVALID_int_regslice,
        ack_in => regslice_both_out_strm_V_dest_V_U_ack_in_dummy,
        data_out => out_strm_TDEST,
        vld_out => regslice_both_out_strm_V_dest_V_U_vld_out,
        ack_out => out_strm_TREADY,
        apdone_blk => regslice_both_out_strm_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp2_flush_enable)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp3_flush_enable)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter2_state11)))) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter2_state11))) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten7_reg_448_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_flatten7_reg_448 <= ap_const_lv19_0;
            elsif (((icmp_ln50_fu_821_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                indvar_flatten7_reg_448 <= add_ln50_fu_789_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_379_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvar_flatten_reg_379 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln32_fu_613_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                indvar_flatten_reg_379 <= add_ln32_fu_607_p2;
            end if; 
        end if;
    end process;

    px_1_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                px_1_reg_303 <= ap_const_lv10_0;
            elsif ((not(((icmp_ln25_fu_576_p2 = ap_const_lv1_0) and (in_strm_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln25_fu_576_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                px_1_reg_303 <= add_ln25_fu_570_p2;
            end if; 
        end if;
    end process;

    px_2_reg_470_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                px_2_reg_470 <= ap_const_lv10_0;
            elsif (((icmp_ln50_reg_1405 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                px_2_reg_470 <= add_ln58_reg_1444;
            end if; 
        end if;
    end process;

    px_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                px_reg_292 <= ap_const_lv10_1FE;
            elsif ((not(((icmp_ln18_fu_553_p2 = ap_const_lv1_0) and (in_strm_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln18_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                px_reg_292 <= add_ln18_fu_559_p2;
            end if; 
        end if;
    end process;

    py_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                py_reg_459 <= ap_const_lv10_0;
            elsif (((icmp_ln50_fu_821_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                py_reg_459 <= select_ln50_fu_894_p3;
            end if; 
        end if;
    end process;

    read_cnt_fu_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                read_cnt_fu_188 <= ap_const_lv32_202;
            elsif (((icmp_ln69_fu_956_p2 = ap_const_lv1_1) and (icmp_ln50_fu_821_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                read_cnt_fu_188 <= read_cnt_1_fu_962_p2;
            end if; 
        end if;
    end process;

    val_in_reg_492_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_272)) then
                if (((icmp_ln69_fu_956_p2 = ap_const_lv1_0) and (icmp_ln50_fu_821_p2 = ap_const_lv1_0))) then 
                    val_in_reg_492 <= ap_const_lv32_0;
                elsif (((icmp_ln69_fu_956_p2 = ap_const_lv1_1) and (icmp_ln50_fu_821_p2 = ap_const_lv1_0))) then 
                    val_in_reg_492 <= in_strm_TDATA_int_regslice;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    val_in_reg_492 <= ap_phi_reg_pp3_iter0_val_in_reg_492;
                end if;
            end if; 
        end if;
    end process;

    val_last_V_1_reg_481_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                val_last_V_1_reg_481 <= ap_const_lv1_0;
            elsif (((icmp_ln50_reg_1405 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                val_last_V_1_reg_481 <= val_last_V_reg_1456;
            end if; 
        end if;
    end process;

    window_1_0_reg_514_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                window_1_0_reg_514 <= trunc_ln32_reg_1332;
            elsif (((icmp_ln50_reg_1405 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                window_1_0_reg_514 <= window_1_1_fu_985_p1;
            end if; 
        end if;
    end process;

    window_1_1_in_reg_504_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                window_1_1_in_reg_504 <= window_1_2_1_reg_436;
            elsif (((icmp_ln50_reg_1405_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                window_1_1_in_reg_504 <= window_1_2_reg_1489;
            end if; 
        end if;
    end process;

    window_2_0_reg_535_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                window_2_0_reg_535 <= window_2_1_1_reg_424;
            elsif (((ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln50_reg_1405_pp3_iter2_reg = ap_const_lv1_0))) then 
                window_2_0_reg_535 <= window_2_1_reg_523;
            end if; 
        end if;
    end process;

    window_2_1_reg_523_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                window_2_1_reg_523 <= window_2_2_1_reg_412;
            elsif (((ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln50_reg_1405_pp3_iter2_reg = ap_const_lv1_0))) then 
                window_2_1_reg_523 <= val_in_reg_492_pp3_iter2_reg;
            end if; 
        end if;
    end process;

    wx_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                wx_reg_390 <= ap_const_lv2_1;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln32_fu_613_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                wx_reg_390 <= add_ln33_fu_659_p2;
            end if; 
        end if;
    end process;

    wy_reg_401_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                wy_reg_401 <= ap_const_lv2_1;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln32_reg_1299 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                wy_reg_401 <= select_ln32_1_fu_681_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_fu_821_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                add_ln58_reg_1444 <= add_ln58_fu_914_p2;
                val_last_V_reg_1456 <= val_last_V_fu_940_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                add_ln58_reg_1444_pp3_iter1_reg <= add_ln58_reg_1444;
                empty_18_reg_1400 <= empty_18_fu_807_p2;
                empty_18_reg_1400_pp3_iter1_reg <= empty_18_reg_1400;
                icmp_ln19_reg_1437_pp3_iter1_reg <= icmp_ln19_reg_1437;
                icmp_ln50_reg_1405 <= icmp_ln50_fu_821_p2;
                icmp_ln50_reg_1405_pp3_iter1_reg <= icmp_ln50_reg_1405;
                icmp_ln51_reg_1409_pp3_iter1_reg <= icmp_ln51_reg_1409;
                p_mid1_reg_1421_pp3_iter1_reg <= p_mid1_reg_1421;
                select_ln41_5_reg_1426_pp3_iter1_reg <= select_ln41_5_reg_1426;
                val_in_reg_492_pp3_iter1_reg <= val_in_reg_492;
                val_last_V_reg_1456_pp3_iter1_reg <= val_last_V_reg_1456;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_fu_821_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln19_reg_1437 <= icmp_ln19_fu_908_p2;
                icmp_ln51_reg_1409 <= icmp_ln51_fu_830_p2;
                linebuf_0_addr_2_reg_1466 <= zext_ln51_fu_902_p1(9 - 1 downto 0);
                p_mid1_reg_1421 <= p_mid1_fu_872_p2;
                select_ln41_2_reg_1414 <= select_ln41_2_fu_864_p3;
                select_ln41_5_reg_1426 <= select_ln41_5_fu_886_p3;
                tmp_2_reg_1450 <= add_ln58_fu_914_p2(9 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln32_reg_1299 <= icmp_ln32_fu_613_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln32_fu_613_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln33_reg_1303 <= icmp_ln33_fu_619_p2;
                icmp_ln35_1_reg_1319 <= icmp_ln35_1_fu_653_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then
                icmp_ln50_reg_1405_pp3_iter2_reg <= icmp_ln50_reg_1405_pp3_iter1_reg;
                val_in_reg_492_pp3_iter2_reg <= val_in_reg_492_pp3_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln25_fu_576_p2 = ap_const_lv1_0) and (in_strm_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln25_fu_576_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                p_phi22_reg_327 <= in_strm_TSTRB_int_regslice;
                p_phi23_reg_340 <= in_strm_TUSER_int_regslice;
                p_phi24_reg_353 <= in_strm_TID_int_regslice;
                p_phi25_reg_366 <= in_strm_TDEST_int_regslice;
                p_phi_reg_314 <= in_strm_TKEEP_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_reg_1405 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                select_ln19_1_reg_1482 <= select_ln19_1_fu_1113_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                trunc_ln32_reg_1332 <= trunc_ln32_fu_668_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                window_0_0_1_fu_168 <= window_0_0_fu_172;
                window_0_0_fu_172 <= window_0_1_fu_176;
                window_1_0_1_fu_180 <= window_1_0_reg_514;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_reg_1405 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                window_0_1_fu_176 <= linebuf_0_q1;
                window_1_2_reg_1489 <= linebuf_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln32_reg_1299 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                window_1_2_1_reg_436 <= window_2_2_15_fu_763_p3;
                window_2_1_1_reg_424 <= window_2_2_14_fu_755_p3;
                window_2_2_1_reg_412 <= window_2_2_13_fu_747_p3;
                window_2_2_2_fu_164 <= window_2_2_16_fu_771_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                window_2_0_1_fu_184 <= ap_phi_mux_window_2_0_phi_fu_538_p4;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln18_fu_553_p2, ap_CS_fsm_state4, icmp_ln25_fu_576_p2, ap_enable_reg_pp3_iter2, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_CS_fsm_state13, regslice_both_out_strm_V_data_V_U_apdone_blk, in_strm_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln18_fu_553_p2 = ap_const_lv1_0) and (in_strm_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln18_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((icmp_ln18_fu_553_p2 = ap_const_lv1_0) and (in_strm_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln18_fu_553_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if ((not(((icmp_ln25_fu_576_p2 = ap_const_lv1_0) and (in_strm_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln25_fu_576_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((icmp_ln25_fu_576_p2 = ap_const_lv1_0) and (in_strm_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln25_fu_576_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                if (((regslice_both_out_strm_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln18_fu_559_p2 <= std_logic_vector(unsigned(px_reg_292) + unsigned(ap_const_lv10_1));
    add_ln25_fu_570_p2 <= std_logic_vector(unsigned(px_1_reg_303) + unsigned(ap_const_lv10_1));
    add_ln27_fu_1227_p2 <= std_logic_vector(signed(sext_ln23_fu_1223_p1) + signed(ap_const_lv29_1));
    add_ln32_1_fu_675_p2 <= std_logic_vector(unsigned(wy_reg_401) + unsigned(ap_const_lv2_1));
    add_ln32_fu_607_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_379) + unsigned(ap_const_lv3_1));
    add_ln33_fu_659_p2 <= std_logic_vector(unsigned(select_ln32_fu_625_p3) + unsigned(ap_const_lv2_1));
    add_ln35_fu_637_p2 <= std_logic_vector(unsigned(zext_ln33_fu_633_p1) + unsigned(ap_const_lv3_5));
    add_ln50_fu_789_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_448) + unsigned(ap_const_lv19_1));
    add_ln58_fu_914_p2 <= std_logic_vector(unsigned(select_ln41_fu_836_p3) + unsigned(ap_const_lv10_1));
    add_ln59_1_fu_1048_p2 <= std_logic_vector(unsigned(window_0_1_fu_176) + unsigned(val_out_1_0_1_fu_1031_p3));
    add_ln59_2_fu_1070_p2 <= std_logic_vector(unsigned(shl_ln59_1_fu_1062_p3) + unsigned(select_ln58_1_fu_1054_p3));
    add_ln59_3_fu_1095_p2 <= std_logic_vector(unsigned(shl_ln59_2_fu_1087_p3) + unsigned(select_ln19_fu_1076_p3));
    add_ln59_4_fu_1107_p2 <= std_logic_vector(unsigned(shl_ln59_3_fu_1101_p2) + unsigned(add_ln59_3_fu_1095_p2));
    add_ln59_5_fu_1148_p2 <= std_logic_vector(unsigned(window_2_0_1_fu_184) + unsigned(select_ln19_1_reg_1482));
    add_ln59_6_fu_1166_p2 <= std_logic_vector(unsigned(shl_ln59_4_fu_1160_p2) + unsigned(select_ln58_2_fu_1153_p3));
    add_ln59_7_fu_1191_p2 <= std_logic_vector(unsigned(ap_phi_mux_window_2_1_phi_fu_526_p4) + unsigned(val_out_1_2_1_fu_1172_p3));
    add_ln59_fu_1025_p2 <= std_logic_vector(unsigned(shl_ln59_fu_1019_p2) + unsigned(select_ln58_fu_1011_p3));
    and_ln19_1_fu_1043_p2 <= (xor_ln19_fu_1038_p2 and select_ln41_2_reg_1414);
    and_ln19_2_fu_1143_p2 <= (xor_ln41_fu_1138_p2 and icmp_ln19_reg_1437_pp3_iter1_reg);
    and_ln19_fu_1007_p2 <= (select_ln41_2_reg_1414 and icmp_ln19_reg_1437);
    and_ln64_fu_934_p2 <= (select_ln41_1_fu_850_p3 and icmp_ln64_fu_928_p2);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_01001_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter2, icmp_ln50_reg_1405_pp3_iter1_reg, ap_enable_reg_pp3_iter3, icmp_ln50_reg_1405_pp3_iter2_reg, ap_predicate_op161_read_state9, in_strm_TVALID_int_regslice, out_strm_TREADY_int_regslice)
    begin
                ap_block_pp3_stage0_01001 <= (((ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (out_strm_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln50_reg_1405_pp3_iter2_reg = ap_const_lv1_0)) or ((icmp_ln50_reg_1405_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (out_strm_TREADY_int_regslice = ap_const_logic_0)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_predicate_op161_read_state9 = ap_const_boolean_1) and (in_strm_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter2, icmp_ln50_reg_1405_pp3_iter1_reg, ap_enable_reg_pp3_iter3, icmp_ln50_reg_1405_pp3_iter2_reg, ap_predicate_op161_read_state9, ap_block_state11_io, ap_block_state12_io, in_strm_TVALID_int_regslice, out_strm_TREADY_int_regslice)
    begin
                ap_block_pp3_stage0_11001 <= (((ap_enable_reg_pp3_iter3 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state12_io) or ((out_strm_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln50_reg_1405_pp3_iter2_reg = ap_const_lv1_0)))) or ((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state11_io) or ((icmp_ln50_reg_1405_pp3_iter1_reg = ap_const_lv1_0) and (out_strm_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_predicate_op161_read_state9 = ap_const_boolean_1) and (in_strm_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter2, icmp_ln50_reg_1405_pp3_iter1_reg, ap_enable_reg_pp3_iter3, icmp_ln50_reg_1405_pp3_iter2_reg, ap_predicate_op161_read_state9, ap_block_state11_io, ap_block_state12_io, in_strm_TVALID_int_regslice, out_strm_TREADY_int_regslice)
    begin
                ap_block_pp3_stage0_subdone <= (((ap_enable_reg_pp3_iter3 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state12_io) or ((out_strm_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln50_reg_1405_pp3_iter2_reg = ap_const_lv1_0)))) or ((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state11_io) or ((icmp_ln50_reg_1405_pp3_iter1_reg = ap_const_lv1_0) and (out_strm_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_predicate_op161_read_state9 = ap_const_boolean_1) and (in_strm_TVALID_int_regslice = ap_const_logic_0)));
    end process;

        ap_block_state10_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_io_assign_proc : process(icmp_ln50_reg_1405_pp3_iter1_reg, out_strm_TREADY_int_regslice)
    begin
                ap_block_state11_io <= ((icmp_ln50_reg_1405_pp3_iter1_reg = ap_const_lv1_0) and (out_strm_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state11_pp3_stage0_iter2_assign_proc : process(icmp_ln50_reg_1405_pp3_iter1_reg, out_strm_TREADY_int_regslice)
    begin
                ap_block_state11_pp3_stage0_iter2 <= ((icmp_ln50_reg_1405_pp3_iter1_reg = ap_const_lv1_0) and (out_strm_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state12_io_assign_proc : process(icmp_ln50_reg_1405_pp3_iter2_reg, out_strm_TREADY_int_regslice)
    begin
                ap_block_state12_io <= ((out_strm_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln50_reg_1405_pp3_iter2_reg = ap_const_lv1_0));
    end process;


    ap_block_state12_pp3_stage0_iter3_assign_proc : process(icmp_ln50_reg_1405_pp3_iter2_reg, out_strm_TREADY_int_regslice)
    begin
                ap_block_state12_pp3_stage0_iter3 <= ((out_strm_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln50_reg_1405_pp3_iter2_reg = ap_const_lv1_0));
    end process;


    ap_block_state2_assign_proc : process(icmp_ln18_fu_553_p2, in_strm_TVALID_int_regslice)
    begin
                ap_block_state2 <= ((icmp_ln18_fu_553_p2 = ap_const_lv1_0) and (in_strm_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state4_assign_proc : process(icmp_ln25_fu_576_p2, in_strm_TVALID_int_regslice)
    begin
                ap_block_state4 <= ((icmp_ln25_fu_576_p2 = ap_const_lv1_0) and (in_strm_TVALID_int_regslice = ap_const_logic_0));
    end process;

        ap_block_state6_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp3_stage0_iter0_assign_proc : process(ap_predicate_op161_read_state9, in_strm_TVALID_int_regslice)
    begin
                ap_block_state9_pp3_stage0_iter0 <= ((ap_predicate_op161_read_state9 = ap_const_boolean_1) and (in_strm_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_condition_272_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001)
    begin
                ap_condition_272 <= ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0));
    end process;


    ap_condition_pp2_flush_enable_assign_proc : process(ap_CS_fsm_pp2_stage0, icmp_ln32_fu_613_p2, ap_block_pp2_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln32_fu_613_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_condition_pp2_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp2_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter2_state11_assign_proc : process(ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) then 
            ap_condition_pp3_exit_iter2_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter2_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_flush_enable_assign_proc : process(ap_CS_fsm_pp3_stage0, icmp_ln50_fu_821_p2, ap_block_pp3_stage0_subdone)
    begin
        if (((icmp_ln50_fu_821_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            ap_condition_pp3_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp3_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state13, regslice_both_out_strm_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_out_strm_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter3, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_px_2_phi_fu_474_p4_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0, icmp_ln50_reg_1405, px_2_reg_470, add_ln58_reg_1444, ap_enable_reg_pp3_iter1)
    begin
        if (((icmp_ln50_reg_1405 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            ap_phi_mux_px_2_phi_fu_474_p4 <= add_ln58_reg_1444;
        else 
            ap_phi_mux_px_2_phi_fu_474_p4 <= px_2_reg_470;
        end if; 
    end process;


    ap_phi_mux_val_in_phi_fu_495_p4_assign_proc : process(icmp_ln50_fu_821_p2, icmp_ln69_fu_956_p2, ap_phi_reg_pp3_iter0_val_in_reg_492, in_strm_TDATA_int_regslice)
    begin
        if ((icmp_ln50_fu_821_p2 = ap_const_lv1_0)) then
            if ((icmp_ln69_fu_956_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_val_in_phi_fu_495_p4 <= ap_const_lv32_0;
            elsif ((icmp_ln69_fu_956_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_val_in_phi_fu_495_p4 <= in_strm_TDATA_int_regslice;
            else 
                ap_phi_mux_val_in_phi_fu_495_p4 <= ap_phi_reg_pp3_iter0_val_in_reg_492;
            end if;
        else 
            ap_phi_mux_val_in_phi_fu_495_p4 <= ap_phi_reg_pp3_iter0_val_in_reg_492;
        end if; 
    end process;


    ap_phi_mux_val_last_V_1_phi_fu_485_p4_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0, icmp_ln50_reg_1405, val_last_V_1_reg_481, val_last_V_reg_1456, ap_enable_reg_pp3_iter1)
    begin
        if (((icmp_ln50_reg_1405 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            ap_phi_mux_val_last_V_1_phi_fu_485_p4 <= val_last_V_reg_1456;
        else 
            ap_phi_mux_val_last_V_1_phi_fu_485_p4 <= val_last_V_1_reg_481;
        end if; 
    end process;


    ap_phi_mux_window_1_1_in_phi_fu_507_p4_assign_proc : process(ap_block_pp3_stage0, ap_enable_reg_pp3_iter2, icmp_ln50_reg_1405_pp3_iter1_reg, window_1_1_in_reg_504, window_1_2_reg_1489)
    begin
        if (((icmp_ln50_reg_1405_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            ap_phi_mux_window_1_1_in_phi_fu_507_p4 <= window_1_2_reg_1489;
        else 
            ap_phi_mux_window_1_1_in_phi_fu_507_p4 <= window_1_1_in_reg_504;
        end if; 
    end process;


    ap_phi_mux_window_2_0_phi_fu_538_p4_assign_proc : process(ap_block_pp3_stage0, ap_enable_reg_pp3_iter3, icmp_ln50_reg_1405_pp3_iter2_reg, window_2_1_reg_523, window_2_0_reg_535)
    begin
        if (((ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (icmp_ln50_reg_1405_pp3_iter2_reg = ap_const_lv1_0))) then 
            ap_phi_mux_window_2_0_phi_fu_538_p4 <= window_2_1_reg_523;
        else 
            ap_phi_mux_window_2_0_phi_fu_538_p4 <= window_2_0_reg_535;
        end if; 
    end process;


    ap_phi_mux_window_2_1_phi_fu_526_p4_assign_proc : process(ap_block_pp3_stage0, ap_enable_reg_pp3_iter3, icmp_ln50_reg_1405_pp3_iter2_reg, val_in_reg_492_pp3_iter2_reg, window_2_1_reg_523)
    begin
        if (((ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (icmp_ln50_reg_1405_pp3_iter2_reg = ap_const_lv1_0))) then 
            ap_phi_mux_window_2_1_phi_fu_526_p4 <= val_in_reg_492_pp3_iter2_reg;
        else 
            ap_phi_mux_window_2_1_phi_fu_526_p4 <= window_2_1_reg_523;
        end if; 
    end process;

    ap_phi_reg_pp3_iter0_val_in_reg_492 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op161_read_state9_assign_proc : process(icmp_ln50_fu_821_p2, icmp_ln69_fu_956_p2)
    begin
                ap_predicate_op161_read_state9 <= ((icmp_ln69_fu_956_p2 = ap_const_lv1_1) and (icmp_ln50_fu_821_p2 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13, regslice_both_out_strm_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_out_strm_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    cmp63_fu_795_p2 <= "1" when (py_reg_459 = ap_const_lv10_1FF) else "0";
    cmp63_mid1_fu_844_p2 <= "1" when (empty_18_fu_807_p2 = ap_const_lv10_1FF) else "0";
    cmp_i_0_fu_801_p2 <= "0" when (py_reg_459 = ap_const_lv10_0) else "1";
    cmp_i_0_mid1_fu_858_p2 <= "0" when (empty_18_fu_807_p2 = ap_const_lv10_0) else "1";
    empty_18_fu_807_p2 <= std_logic_vector(unsigned(py_reg_459) + unsigned(ap_const_lv10_1));
    icmp_ln18_fu_553_p2 <= "1" when (px_reg_292 = ap_const_lv10_200) else "0";
    icmp_ln19_fu_908_p2 <= "0" when (select_ln41_fu_836_p3 = ap_const_lv10_0) else "1";
    icmp_ln25_fu_576_p2 <= "1" when (px_1_reg_303 = ap_const_lv10_200) else "0";
    icmp_ln32_fu_613_p2 <= "1" when (indvar_flatten_reg_379 = ap_const_lv3_4) else "0";
    icmp_ln33_fu_619_p2 <= "1" when (wx_reg_390 = ap_const_lv2_3) else "0";
    icmp_ln35_1_fu_653_p2 <= "1" when (select_ln32_fu_625_p3 = ap_const_lv2_1) else "0";
    icmp_ln35_2_fu_698_p2 <= "1" when (wy_reg_401 = ap_const_lv2_1) else "0";
    icmp_ln35_fu_692_p2 <= "1" when (wy_reg_401 = ap_const_lv2_0) else "0";
    icmp_ln50_fu_821_p2 <= "1" when (indvar_flatten7_reg_448 = ap_const_lv19_40000) else "0";
    icmp_ln51_fu_830_p2 <= "1" when (ap_phi_mux_px_2_phi_fu_474_p4 = ap_const_lv10_200) else "0";
    icmp_ln64_fu_928_p2 <= "1" when (select_ln41_fu_836_p3 = ap_const_lv10_1FF) else "0";
    icmp_ln69_fu_956_p2 <= "1" when (signed(tmp_5_fu_946_p4) < signed(ap_const_lv14_1)) else "0";

    in_strm_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln18_fu_553_p2, ap_CS_fsm_state4, icmp_ln25_fu_576_p2, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0, icmp_ln50_fu_821_p2, icmp_ln69_fu_956_p2, in_strm_TVALID_int_regslice)
    begin
        if ((((icmp_ln69_fu_956_p2 = ap_const_lv1_1) and (icmp_ln50_fu_821_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((icmp_ln25_fu_576_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln18_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            in_strm_TDATA_blk_n <= in_strm_TVALID_int_regslice;
        else 
            in_strm_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_strm_TREADY <= regslice_both_in_strm_V_data_V_U_ack_in;

    in_strm_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state2, icmp_ln18_fu_553_p2, ap_CS_fsm_state4, icmp_ln25_fu_576_p2, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_predicate_op161_read_state9, ap_block_pp3_stage0_11001, in_strm_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_predicate_op161_read_state9 = ap_const_boolean_1)) or (not(((icmp_ln25_fu_576_p2 = ap_const_lv1_0) and (in_strm_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln25_fu_576_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((icmp_ln18_fu_553_p2 = ap_const_lv1_0) and (in_strm_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln18_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            in_strm_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in_strm_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_0_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, linebuf_0_addr_2_reg_1466, ap_enable_reg_pp3_iter1, zext_ln18_fu_565_p1, zext_ln35_fu_647_p1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            linebuf_0_address0 <= linebuf_0_addr_2_reg_1466;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            linebuf_0_address0 <= zext_ln35_fu_647_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            linebuf_0_address0 <= zext_ln18_fu_565_p1(9 - 1 downto 0);
        else 
            linebuf_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    linebuf_0_address1 <= zext_ln51_fu_902_p1(9 - 1 downto 0);

    linebuf_0_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln18_fu_553_p2, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_enable_reg_pp3_iter1, in_strm_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or (not(((icmp_ln18_fu_553_p2 = ap_const_lv1_0) and (in_strm_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            linebuf_0_ce0 <= ap_const_logic_1;
        else 
            linebuf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_0_ce1_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            linebuf_0_ce1 <= ap_const_logic_1;
        else 
            linebuf_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_0_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0, ap_enable_reg_pp3_iter1, linebuf_1_q0, in_strm_TDATA_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            linebuf_0_d0 <= linebuf_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            linebuf_0_d0 <= in_strm_TDATA_int_regslice;
        else 
            linebuf_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    linebuf_0_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln18_fu_553_p2, ap_CS_fsm_pp3_stage0, icmp_ln50_reg_1405, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1, in_strm_TVALID_int_regslice)
    begin
        if ((((icmp_ln50_reg_1405 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or (not(((icmp_ln18_fu_553_p2 = ap_const_lv1_0) and (in_strm_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln18_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            linebuf_0_we0 <= ap_const_logic_1;
        else 
            linebuf_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_1_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0, icmp_ln50_fu_821_p2, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, zext_ln25_fu_582_p1, zext_ln35_fu_647_p1, ap_block_pp2_stage0, zext_ln51_fu_902_p1)
    begin
        if (((icmp_ln50_fu_821_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            linebuf_1_address0 <= zext_ln51_fu_902_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            linebuf_1_address0 <= zext_ln35_fu_647_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            linebuf_1_address0 <= zext_ln25_fu_582_p1(9 - 1 downto 0);
        else 
            linebuf_1_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    linebuf_1_ce0_assign_proc : process(ap_CS_fsm_state4, icmp_ln25_fu_576_p2, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, icmp_ln50_fu_821_p2, ap_block_pp3_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, in_strm_TVALID_int_regslice)
    begin
        if ((((icmp_ln50_fu_821_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or (not(((icmp_ln25_fu_576_p2 = ap_const_lv1_0) and (in_strm_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            linebuf_1_ce0 <= ap_const_logic_1;
        else 
            linebuf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_1_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0, icmp_ln50_fu_821_p2, ap_phi_mux_val_in_phi_fu_495_p4, in_strm_TDATA_int_regslice)
    begin
        if (((icmp_ln50_fu_821_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            linebuf_1_d0 <= ap_phi_mux_val_in_phi_fu_495_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            linebuf_1_d0 <= in_strm_TDATA_int_regslice;
        else 
            linebuf_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    linebuf_1_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln25_fu_576_p2, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, icmp_ln50_fu_821_p2, ap_block_pp3_stage0_11001, in_strm_TVALID_int_regslice)
    begin
        if ((((icmp_ln50_fu_821_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or (not(((icmp_ln25_fu_576_p2 = ap_const_lv1_0) and (in_strm_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln25_fu_576_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            linebuf_1_we0 <= ap_const_logic_1;
        else 
            linebuf_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln19_fu_1178_p2 <= (select_ln41_3_fu_1133_p3 or add_ln58_reg_1444_pp3_iter1_reg);

    out_strm_TDATA_blk_n_assign_proc : process(ap_block_pp3_stage0, ap_enable_reg_pp3_iter2, icmp_ln50_reg_1405_pp3_iter1_reg, ap_enable_reg_pp3_iter3, icmp_ln50_reg_1405_pp3_iter2_reg, out_strm_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (icmp_ln50_reg_1405_pp3_iter2_reg = ap_const_lv1_0)) or ((icmp_ln50_reg_1405_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0)))) then 
            out_strm_TDATA_blk_n <= out_strm_TREADY_int_regslice;
        else 
            out_strm_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        out_strm_TDATA_int_regslice <= std_logic_vector(IEEE.numeric_std.resize(signed(val_data_V_fu_1233_p3),32));

    out_strm_TVALID <= regslice_both_out_strm_V_data_V_U_vld_out;

    out_strm_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp3_iter2, icmp_ln50_reg_1405_pp3_iter1_reg, ap_block_pp3_stage0_11001)
    begin
        if (((icmp_ln50_reg_1405_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            out_strm_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_strm_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    p_mid1_fu_872_p2 <= std_logic_vector(unsigned(py_reg_459) + unsigned(ap_const_lv10_2));
    read_cnt_1_fu_962_p2 <= std_logic_vector(unsigned(read_cnt_fu_188) + unsigned(ap_const_lv32_1));
    select_ln19_1_fu_1113_p3 <= 
        add_ln59_3_fu_1095_p2 when (tmp_2_reg_1450(0) = '1') else 
        add_ln59_4_fu_1107_p2;
    select_ln19_fu_1076_p3 <= 
        add_ln59_2_fu_1070_p2 when (icmp_ln19_reg_1437(0) = '1') else 
        select_ln58_1_fu_1054_p3;
    select_ln32_1_fu_681_p3 <= 
        add_ln32_1_fu_675_p2 when (icmp_ln33_reg_1303(0) = '1') else 
        wy_reg_401;
    select_ln32_2_fu_704_p3 <= 
        icmp_ln35_fu_692_p2 when (icmp_ln33_reg_1303(0) = '1') else 
        icmp_ln35_2_fu_698_p2;
    select_ln32_fu_625_p3 <= 
        ap_const_lv2_1 when (icmp_ln33_fu_619_p2(0) = '1') else 
        wx_reg_390;
    select_ln41_1_fu_850_p3 <= 
        cmp63_mid1_fu_844_p2 when (icmp_ln51_fu_830_p2(0) = '1') else 
        cmp63_fu_795_p2;
    select_ln41_2_fu_864_p3 <= 
        cmp_i_0_mid1_fu_858_p2 when (icmp_ln51_fu_830_p2(0) = '1') else 
        cmp_i_0_fu_801_p2;
    select_ln41_3_fu_1133_p3 <= 
        p_mid1_reg_1421_pp3_iter1_reg when (icmp_ln51_reg_1409_pp3_iter1_reg(0) = '1') else 
        empty_18_reg_1400_pp3_iter1_reg;
    select_ln41_5_fu_886_p3 <= 
        tmp_1_fu_878_p3 when (icmp_ln51_fu_830_p2(0) = '1') else 
        tmp_fu_813_p3;
    select_ln41_fu_836_p3 <= 
        ap_const_lv10_0 when (icmp_ln51_fu_830_p2(0) = '1') else 
        ap_phi_mux_px_2_phi_fu_474_p4;
    select_ln50_fu_894_p3 <= 
        empty_18_fu_807_p2 when (icmp_ln51_fu_830_p2(0) = '1') else 
        py_reg_459;
    select_ln58_1_fu_1054_p3 <= 
        add_ln59_1_fu_1048_p2 when (and_ln19_1_fu_1043_p2(0) = '1') else 
        val_out_1_0_1_fu_1031_p3;
    select_ln58_2_fu_1153_p3 <= 
        add_ln59_5_fu_1148_p2 when (and_ln19_2_fu_1143_p2(0) = '1') else 
        select_ln19_1_reg_1482;
    select_ln58_3_fu_1197_p3 <= 
        val_out_1_2_1_fu_1172_p3 when (tmp_3_fu_1183_p3(0) = '1') else 
        add_ln59_7_fu_1191_p2;
    select_ln58_fu_1011_p3 <= 
        window_0_0_1_fu_168 when (and_ln19_fu_1007_p2(0) = '1') else 
        ap_const_lv32_0;
        sext_ln23_fu_1223_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_assign_1_fu_1213_p4),29));

        sext_ln35_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln35_fu_637_p2),9));

    shl_ln59_1_fu_1062_p3 <= (window_1_0_1_fu_180 & ap_const_lv1_0);
    shl_ln59_2_fu_1087_p3 <= (trunc_ln59_fu_1083_p1 & ap_const_lv2_0);
    shl_ln59_3_fu_1101_p2 <= std_logic_vector(shift_left(unsigned(ap_phi_mux_window_1_1_in_phi_fu_507_p4),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln59_4_fu_1160_p2 <= std_logic_vector(shift_left(unsigned(ap_phi_mux_window_2_0_phi_fu_538_p4),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln59_fu_1019_p2 <= std_logic_vector(shift_left(unsigned(window_0_0_fu_172),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_1_fu_878_p3 <= p_mid1_fu_872_p2(9 downto 9);
    tmp_3_fu_1183_p3 <= or_ln19_fu_1178_p2(9 downto 9);
    tmp_4_fu_1205_p3 <= select_ln58_3_fu_1197_p3(3 downto 3);
    tmp_5_fu_946_p4 <= read_cnt_fu_188(31 downto 18);
    tmp_fu_813_p3 <= empty_18_fu_807_p2(9 downto 9);
    trunc_ln32_1_fu_688_p1 <= select_ln32_1_fu_681_p3(1 - 1 downto 0);
    trunc_ln32_fu_668_p1 <= window_2_2_2_fu_164(31 - 1 downto 0);
    trunc_ln59_fu_1083_p1 <= window_1_0_reg_514(30 - 1 downto 0);
    val_data_V_fu_1233_p3 <= 
        add_ln27_fu_1227_p2 when (tmp_4_fu_1205_p3(0) = '1') else 
        sext_ln23_fu_1223_p1;
    val_last_V_fu_940_p2 <= (ap_phi_mux_val_last_V_1_phi_fu_485_p4 or and_ln64_fu_934_p2);
    val_out_1_0_1_fu_1031_p3 <= 
        add_ln59_fu_1025_p2 when (select_ln41_2_reg_1414(0) = '1') else 
        ap_const_lv32_0;
    val_out_1_2_1_fu_1172_p3 <= 
        select_ln19_1_reg_1482 when (select_ln41_5_reg_1426_pp3_iter1_reg(0) = '1') else 
        add_ln59_6_fu_1166_p2;
    window_1_1_1_fu_711_p3 <= 
        linebuf_0_q0 when (trunc_ln32_1_fu_688_p1(0) = '1') else 
        linebuf_1_q0;
    window_1_1_fu_985_p1 <= ap_phi_mux_window_1_1_in_phi_fu_507_p4(31 - 1 downto 0);
    window_2_2_11_fu_733_p3 <= 
        window_2_2_1_reg_412 when (icmp_ln35_1_reg_1319(0) = '1') else 
        window_1_1_1_fu_711_p3;
    window_2_2_12_fu_740_p3 <= 
        window_1_1_1_fu_711_p3 when (icmp_ln35_1_reg_1319(0) = '1') else 
        window_2_1_1_reg_424;
    window_2_2_13_fu_747_p3 <= 
        window_2_2_1_reg_412 when (select_ln32_2_fu_704_p3(0) = '1') else 
        window_2_2_11_fu_733_p3;
    window_2_2_14_fu_755_p3 <= 
        window_2_1_1_reg_424 when (select_ln32_2_fu_704_p3(0) = '1') else 
        window_2_2_12_fu_740_p3;
    window_2_2_15_fu_763_p3 <= 
        window_2_2_fu_719_p3 when (select_ln32_2_fu_704_p3(0) = '1') else 
        window_1_2_1_reg_436;
    window_2_2_16_fu_771_p3 <= 
        window_2_2_9_fu_726_p3 when (select_ln32_2_fu_704_p3(0) = '1') else 
        window_2_2_2_fu_164;
    window_2_2_9_fu_726_p3 <= 
        window_1_1_1_fu_711_p3 when (icmp_ln35_1_reg_1319(0) = '1') else 
        window_2_2_2_fu_164;
    window_2_2_fu_719_p3 <= 
        window_1_2_1_reg_436 when (icmp_ln35_1_reg_1319(0) = '1') else 
        window_1_1_1_fu_711_p3;
    x_assign_1_fu_1213_p4 <= select_ln58_3_fu_1197_p3(31 downto 4);
    xor_ln19_fu_1038_p2 <= (tmp_2_reg_1450 xor ap_const_lv1_1);
    xor_ln41_fu_1138_p2 <= (select_ln41_5_reg_1426_pp3_iter1_reg xor ap_const_lv1_1);
    zext_ln18_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(px_reg_292),64));
    zext_ln25_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(px_1_reg_303),64));
    zext_ln33_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_fu_625_p3),3));
    zext_ln35_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln35_fu_643_p1),64));
    zext_ln51_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln41_fu_836_p3),64));
end behav;
