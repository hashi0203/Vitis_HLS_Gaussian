// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="gaussian_gaussian,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.427000,HLS_SYN_LAT=262673,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=976,HLS_SYN_LUT=1870,HLS_VERSION=2020_2}" *)

module gaussian (
        ap_clk,
        ap_rst_n,
        in_strm_TDATA,
        in_strm_TVALID,
        in_strm_TREADY,
        in_strm_TKEEP,
        in_strm_TSTRB,
        in_strm_TUSER,
        in_strm_TLAST,
        in_strm_TID,
        in_strm_TDEST,
        out_strm_TDATA,
        out_strm_TVALID,
        out_strm_TREADY,
        out_strm_TKEEP,
        out_strm_TSTRB,
        out_strm_TUSER,
        out_strm_TLAST,
        out_strm_TID,
        out_strm_TDEST,
        s_axi_CONTROL_BUS_AWVALID,
        s_axi_CONTROL_BUS_AWREADY,
        s_axi_CONTROL_BUS_AWADDR,
        s_axi_CONTROL_BUS_WVALID,
        s_axi_CONTROL_BUS_WREADY,
        s_axi_CONTROL_BUS_WDATA,
        s_axi_CONTROL_BUS_WSTRB,
        s_axi_CONTROL_BUS_ARVALID,
        s_axi_CONTROL_BUS_ARREADY,
        s_axi_CONTROL_BUS_ARADDR,
        s_axi_CONTROL_BUS_RVALID,
        s_axi_CONTROL_BUS_RREADY,
        s_axi_CONTROL_BUS_RDATA,
        s_axi_CONTROL_BUS_RRESP,
        s_axi_CONTROL_BUS_BVALID,
        s_axi_CONTROL_BUS_BREADY,
        s_axi_CONTROL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_pp2_stage0 = 9'd32;
parameter    ap_ST_fsm_state8 = 9'd64;
parameter    ap_ST_fsm_pp3_stage0 = 9'd128;
parameter    ap_ST_fsm_state13 = 9'd256;
parameter    C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] in_strm_TDATA;
input   in_strm_TVALID;
output   in_strm_TREADY;
input  [3:0] in_strm_TKEEP;
input  [3:0] in_strm_TSTRB;
input  [0:0] in_strm_TUSER;
input  [0:0] in_strm_TLAST;
input  [0:0] in_strm_TID;
input  [0:0] in_strm_TDEST;
output  [31:0] out_strm_TDATA;
output   out_strm_TVALID;
input   out_strm_TREADY;
output  [3:0] out_strm_TKEEP;
output  [3:0] out_strm_TSTRB;
output  [0:0] out_strm_TUSER;
output  [0:0] out_strm_TLAST;
output  [0:0] out_strm_TID;
output  [0:0] out_strm_TDEST;
input   s_axi_CONTROL_BUS_AWVALID;
output   s_axi_CONTROL_BUS_AWREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_AWADDR;
input   s_axi_CONTROL_BUS_WVALID;
output   s_axi_CONTROL_BUS_WREADY;
input  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_WDATA;
input  [C_S_AXI_CONTROL_BUS_WSTRB_WIDTH - 1:0] s_axi_CONTROL_BUS_WSTRB;
input   s_axi_CONTROL_BUS_ARVALID;
output   s_axi_CONTROL_BUS_ARREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_ARADDR;
output   s_axi_CONTROL_BUS_RVALID;
input   s_axi_CONTROL_BUS_RREADY;
output  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_RDATA;
output  [1:0] s_axi_CONTROL_BUS_RRESP;
output   s_axi_CONTROL_BUS_BVALID;
input   s_axi_CONTROL_BUS_BREADY;
output  [1:0] s_axi_CONTROL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg    in_strm_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln18_fu_553_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln25_fu_576_p2;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_pp3_stage0;
wire   [0:0] icmp_ln50_fu_821_p2;
wire   [0:0] icmp_ln69_fu_956_p2;
reg    out_strm_TDATA_blk_n;
reg    ap_enable_reg_pp3_iter2;
reg   [0:0] icmp_ln50_reg_1405;
reg   [0:0] icmp_ln50_reg_1405_pp3_iter1_reg;
reg    ap_enable_reg_pp3_iter3;
reg   [0:0] icmp_ln50_reg_1405_pp3_iter2_reg;
reg   [2:0] indvar_flatten_reg_379;
reg   [1:0] wx_reg_390;
reg   [1:0] wy_reg_401;
reg   [31:0] window_2_2_1_reg_412;
reg   [31:0] window_2_1_1_reg_424;
reg   [31:0] window_1_2_1_reg_436;
reg   [18:0] indvar_flatten7_reg_448;
reg   [9:0] py_reg_459;
reg   [9:0] px_2_reg_470;
reg   [0:0] val_last_V_1_reg_481;
reg   [31:0] val_in_reg_492;
reg   [31:0] val_in_reg_492_pp3_iter1_reg;
reg    ap_predicate_op161_read_state9;
reg    ap_block_state9_pp3_stage0_iter0;
wire    ap_block_state10_pp3_stage0_iter1;
reg    ap_block_state11_pp3_stage0_iter2;
reg    ap_block_state11_io;
reg    ap_block_state12_pp3_stage0_iter3;
reg    ap_block_state12_io;
reg    ap_block_pp3_stage0_11001;
reg   [31:0] val_in_reg_492_pp3_iter2_reg;
reg   [31:0] window_1_1_in_reg_504;
reg   [30:0] window_1_0_reg_514;
reg   [31:0] window_2_1_reg_523;
reg   [31:0] window_2_0_reg_535;
wire   [9:0] add_ln18_fu_559_p2;
reg    ap_block_state2;
wire   [9:0] add_ln25_fu_570_p2;
reg    ap_block_state4;
wire   [2:0] add_ln32_fu_607_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state6_pp2_stage0_iter0;
wire    ap_block_state7_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln32_fu_613_p2;
reg   [0:0] icmp_ln32_reg_1299;
wire   [0:0] icmp_ln33_fu_619_p2;
reg   [0:0] icmp_ln33_reg_1303;
wire   [0:0] icmp_ln35_1_fu_653_p2;
reg   [0:0] icmp_ln35_1_reg_1319;
wire   [1:0] add_ln33_fu_659_p2;
wire   [30:0] trunc_ln32_fu_668_p1;
reg   [30:0] trunc_ln32_reg_1332;
reg    ap_enable_reg_pp2_iter1;
wire   [1:0] select_ln32_1_fu_681_p3;
wire   [31:0] window_2_2_13_fu_747_p3;
wire   [31:0] window_2_2_14_fu_755_p3;
wire   [31:0] window_2_2_15_fu_763_p3;
wire   [18:0] add_ln50_fu_789_p2;
wire   [9:0] empty_18_fu_807_p2;
reg   [9:0] empty_18_reg_1400;
reg   [9:0] empty_18_reg_1400_pp3_iter1_reg;
wire   [0:0] icmp_ln51_fu_830_p2;
reg   [0:0] icmp_ln51_reg_1409;
reg   [0:0] icmp_ln51_reg_1409_pp3_iter1_reg;
wire   [0:0] select_ln41_2_fu_864_p3;
reg   [0:0] select_ln41_2_reg_1414;
wire   [9:0] p_mid1_fu_872_p2;
reg   [9:0] p_mid1_reg_1421;
reg   [9:0] p_mid1_reg_1421_pp3_iter1_reg;
wire   [0:0] select_ln41_5_fu_886_p3;
reg   [0:0] select_ln41_5_reg_1426;
reg   [0:0] select_ln41_5_reg_1426_pp3_iter1_reg;
wire   [9:0] select_ln50_fu_894_p3;
wire   [0:0] icmp_ln19_fu_908_p2;
reg   [0:0] icmp_ln19_reg_1437;
reg   [0:0] icmp_ln19_reg_1437_pp3_iter1_reg;
wire   [9:0] add_ln58_fu_914_p2;
reg   [9:0] add_ln58_reg_1444;
reg   [9:0] add_ln58_reg_1444_pp3_iter1_reg;
reg   [0:0] tmp_2_reg_1450;
wire   [0:0] val_last_V_fu_940_p2;
reg   [0:0] val_last_V_reg_1456;
reg   [0:0] val_last_V_reg_1456_pp3_iter1_reg;
reg   [8:0] linebuf_0_addr_2_reg_1466;
wire   [30:0] window_1_1_fu_985_p1;
reg    ap_enable_reg_pp3_iter1;
wire   [31:0] select_ln19_1_fu_1113_p3;
reg   [31:0] select_ln19_1_reg_1482;
wire   [31:0] linebuf_1_q0;
reg   [31:0] window_1_2_reg_1489;
wire    ap_CS_fsm_state5;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_flush_enable;
wire    ap_CS_fsm_state8;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_flush_enable;
reg    ap_condition_pp3_exit_iter2_state11;
reg   [8:0] linebuf_0_address0;
reg    linebuf_0_ce0;
reg    linebuf_0_we0;
reg   [31:0] linebuf_0_d0;
wire   [31:0] linebuf_0_q0;
wire   [8:0] linebuf_0_address1;
reg    linebuf_0_ce1;
wire   [31:0] linebuf_0_q1;
reg   [8:0] linebuf_1_address0;
reg    linebuf_1_ce0;
reg    linebuf_1_we0;
reg   [31:0] linebuf_1_d0;
reg   [9:0] px_reg_292;
reg   [9:0] px_1_reg_303;
wire    ap_CS_fsm_state3;
reg   [3:0] p_phi_reg_314;
reg   [3:0] p_phi22_reg_327;
reg   [0:0] p_phi23_reg_340;
reg   [0:0] p_phi24_reg_353;
reg   [0:0] p_phi25_reg_366;
reg   [9:0] ap_phi_mux_px_2_phi_fu_474_p4;
reg   [0:0] ap_phi_mux_val_last_V_1_phi_fu_485_p4;
reg   [31:0] ap_phi_mux_val_in_phi_fu_495_p4;
wire   [31:0] ap_phi_reg_pp3_iter0_val_in_reg_492;
reg   [31:0] ap_phi_mux_window_1_1_in_phi_fu_507_p4;
reg   [31:0] ap_phi_mux_window_2_1_phi_fu_526_p4;
reg   [31:0] ap_phi_mux_window_2_0_phi_fu_538_p4;
wire   [63:0] zext_ln18_fu_565_p1;
wire   [63:0] zext_ln25_fu_582_p1;
wire   [63:0] zext_ln35_fu_647_p1;
wire    ap_block_pp2_stage0;
wire   [63:0] zext_ln51_fu_902_p1;
reg   [31:0] window_2_2_2_fu_164;
wire   [31:0] window_2_2_16_fu_771_p3;
reg   [31:0] window_0_0_1_fu_168;
reg   [31:0] window_0_0_fu_172;
reg   [31:0] window_0_1_fu_176;
reg   [30:0] window_1_0_1_fu_180;
reg   [31:0] window_2_0_1_fu_184;
reg   [31:0] read_cnt_fu_188;
wire   [31:0] read_cnt_1_fu_962_p2;
reg    ap_block_pp3_stage0_01001;
wire   [1:0] select_ln32_fu_625_p3;
wire   [2:0] zext_ln33_fu_633_p1;
wire   [2:0] add_ln35_fu_637_p2;
wire  signed [8:0] sext_ln35_fu_643_p1;
wire   [1:0] add_ln32_1_fu_675_p2;
wire   [0:0] icmp_ln35_fu_692_p2;
wire   [0:0] icmp_ln35_2_fu_698_p2;
wire   [0:0] trunc_ln32_1_fu_688_p1;
wire   [31:0] window_1_1_1_fu_711_p3;
wire   [0:0] select_ln32_2_fu_704_p3;
wire   [31:0] window_2_2_11_fu_733_p3;
wire   [31:0] window_2_2_12_fu_740_p3;
wire   [31:0] window_2_2_fu_719_p3;
wire   [31:0] window_2_2_9_fu_726_p3;
wire   [0:0] cmp63_mid1_fu_844_p2;
wire   [0:0] cmp63_fu_795_p2;
wire   [0:0] cmp_i_0_mid1_fu_858_p2;
wire   [0:0] cmp_i_0_fu_801_p2;
wire   [0:0] tmp_1_fu_878_p3;
wire   [0:0] tmp_fu_813_p3;
wire   [9:0] select_ln41_fu_836_p3;
wire   [0:0] select_ln41_1_fu_850_p3;
wire   [0:0] icmp_ln64_fu_928_p2;
wire   [0:0] and_ln64_fu_934_p2;
wire   [13:0] tmp_5_fu_946_p4;
wire   [0:0] and_ln19_fu_1007_p2;
wire   [31:0] shl_ln59_fu_1019_p2;
wire   [31:0] select_ln58_fu_1011_p3;
wire   [31:0] add_ln59_fu_1025_p2;
wire   [0:0] xor_ln19_fu_1038_p2;
wire   [31:0] val_out_1_0_1_fu_1031_p3;
wire   [0:0] and_ln19_1_fu_1043_p2;
wire   [31:0] add_ln59_1_fu_1048_p2;
wire   [31:0] shl_ln59_1_fu_1062_p3;
wire   [31:0] select_ln58_1_fu_1054_p3;
wire   [31:0] add_ln59_2_fu_1070_p2;
wire   [29:0] trunc_ln59_fu_1083_p1;
wire   [31:0] shl_ln59_2_fu_1087_p3;
wire   [31:0] select_ln19_fu_1076_p3;
wire   [31:0] shl_ln59_3_fu_1101_p2;
wire   [31:0] add_ln59_3_fu_1095_p2;
wire   [31:0] add_ln59_4_fu_1107_p2;
wire   [0:0] xor_ln41_fu_1138_p2;
wire   [0:0] and_ln19_2_fu_1143_p2;
wire   [31:0] add_ln59_5_fu_1148_p2;
wire   [31:0] shl_ln59_4_fu_1160_p2;
wire   [31:0] select_ln58_2_fu_1153_p3;
wire   [31:0] add_ln59_6_fu_1166_p2;
wire   [9:0] select_ln41_3_fu_1133_p3;
wire   [9:0] or_ln19_fu_1178_p2;
wire   [31:0] val_out_1_2_1_fu_1172_p3;
wire   [0:0] tmp_3_fu_1183_p3;
wire   [31:0] add_ln59_7_fu_1191_p2;
wire   [31:0] select_ln58_3_fu_1197_p3;
wire   [27:0] x_assign_1_fu_1213_p4;
wire  signed [28:0] sext_ln23_fu_1223_p1;
wire   [0:0] tmp_4_fu_1205_p3;
wire   [28:0] add_ln27_fu_1227_p2;
wire   [28:0] val_data_V_fu_1233_p3;
wire    ap_CS_fsm_state13;
wire    regslice_both_out_strm_V_data_V_U_apdone_blk;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire    regslice_both_in_strm_V_data_V_U_apdone_blk;
wire   [31:0] in_strm_TDATA_int_regslice;
wire    in_strm_TVALID_int_regslice;
reg    in_strm_TREADY_int_regslice;
wire    regslice_both_in_strm_V_data_V_U_ack_in;
wire    regslice_both_in_strm_V_keep_V_U_apdone_blk;
wire   [3:0] in_strm_TKEEP_int_regslice;
wire    regslice_both_in_strm_V_keep_V_U_vld_out;
wire    regslice_both_in_strm_V_keep_V_U_ack_in;
wire    regslice_both_in_strm_V_strb_V_U_apdone_blk;
wire   [3:0] in_strm_TSTRB_int_regslice;
wire    regslice_both_in_strm_V_strb_V_U_vld_out;
wire    regslice_both_in_strm_V_strb_V_U_ack_in;
wire    regslice_both_in_strm_V_user_V_U_apdone_blk;
wire   [0:0] in_strm_TUSER_int_regslice;
wire    regslice_both_in_strm_V_user_V_U_vld_out;
wire    regslice_both_in_strm_V_user_V_U_ack_in;
wire    regslice_both_in_strm_V_last_V_U_apdone_blk;
wire   [0:0] in_strm_TLAST_int_regslice;
wire    regslice_both_in_strm_V_last_V_U_vld_out;
wire    regslice_both_in_strm_V_last_V_U_ack_in;
wire    regslice_both_in_strm_V_id_V_U_apdone_blk;
wire   [0:0] in_strm_TID_int_regslice;
wire    regslice_both_in_strm_V_id_V_U_vld_out;
wire    regslice_both_in_strm_V_id_V_U_ack_in;
wire    regslice_both_in_strm_V_dest_V_U_apdone_blk;
wire   [0:0] in_strm_TDEST_int_regslice;
wire    regslice_both_in_strm_V_dest_V_U_vld_out;
wire    regslice_both_in_strm_V_dest_V_U_ack_in;
wire   [31:0] out_strm_TDATA_int_regslice;
reg    out_strm_TVALID_int_regslice;
wire    out_strm_TREADY_int_regslice;
wire    regslice_both_out_strm_V_data_V_U_vld_out;
wire    regslice_both_out_strm_V_keep_V_U_apdone_blk;
wire    regslice_both_out_strm_V_keep_V_U_ack_in_dummy;
wire    regslice_both_out_strm_V_keep_V_U_vld_out;
wire    regslice_both_out_strm_V_strb_V_U_apdone_blk;
wire    regslice_both_out_strm_V_strb_V_U_ack_in_dummy;
wire    regslice_both_out_strm_V_strb_V_U_vld_out;
wire    regslice_both_out_strm_V_user_V_U_apdone_blk;
wire    regslice_both_out_strm_V_user_V_U_ack_in_dummy;
wire    regslice_both_out_strm_V_user_V_U_vld_out;
wire    regslice_both_out_strm_V_last_V_U_apdone_blk;
wire    regslice_both_out_strm_V_last_V_U_ack_in_dummy;
wire    regslice_both_out_strm_V_last_V_U_vld_out;
wire    regslice_both_out_strm_V_id_V_U_apdone_blk;
wire    regslice_both_out_strm_V_id_V_U_ack_in_dummy;
wire    regslice_both_out_strm_V_id_V_U_vld_out;
wire    regslice_both_out_strm_V_dest_V_U_apdone_blk;
wire    regslice_both_out_strm_V_dest_V_U_ack_in_dummy;
wire    regslice_both_out_strm_V_dest_V_U_vld_out;
reg    ap_condition_272;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
end

gaussian_CONTROL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_BUS_DATA_WIDTH ))
CONTROL_BUS_s_axi_U(
    .AWVALID(s_axi_CONTROL_BUS_AWVALID),
    .AWREADY(s_axi_CONTROL_BUS_AWREADY),
    .AWADDR(s_axi_CONTROL_BUS_AWADDR),
    .WVALID(s_axi_CONTROL_BUS_WVALID),
    .WREADY(s_axi_CONTROL_BUS_WREADY),
    .WDATA(s_axi_CONTROL_BUS_WDATA),
    .WSTRB(s_axi_CONTROL_BUS_WSTRB),
    .ARVALID(s_axi_CONTROL_BUS_ARVALID),
    .ARREADY(s_axi_CONTROL_BUS_ARREADY),
    .ARADDR(s_axi_CONTROL_BUS_ARADDR),
    .RVALID(s_axi_CONTROL_BUS_RVALID),
    .RREADY(s_axi_CONTROL_BUS_RREADY),
    .RDATA(s_axi_CONTROL_BUS_RDATA),
    .RRESP(s_axi_CONTROL_BUS_RRESP),
    .BVALID(s_axi_CONTROL_BUS_BVALID),
    .BREADY(s_axi_CONTROL_BUS_BREADY),
    .BRESP(s_axi_CONTROL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

gaussian_linebuf_0 #(
    .DataWidth( 32 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
linebuf_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_0_address0),
    .ce0(linebuf_0_ce0),
    .we0(linebuf_0_we0),
    .d0(linebuf_0_d0),
    .q0(linebuf_0_q0),
    .address1(linebuf_0_address1),
    .ce1(linebuf_0_ce1),
    .q1(linebuf_0_q1)
);

gaussian_linebuf_1 #(
    .DataWidth( 32 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
linebuf_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_1_address0),
    .ce0(linebuf_1_ce0),
    .we0(linebuf_1_we0),
    .d0(linebuf_1_d0),
    .q0(linebuf_1_q0)
);

gaussian_regslice_both #(
    .DataWidth( 32 ))
regslice_both_in_strm_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_strm_TDATA),
    .vld_in(in_strm_TVALID),
    .ack_in(regslice_both_in_strm_V_data_V_U_ack_in),
    .data_out(in_strm_TDATA_int_regslice),
    .vld_out(in_strm_TVALID_int_regslice),
    .ack_out(in_strm_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_strm_V_data_V_U_apdone_blk)
);

gaussian_regslice_both #(
    .DataWidth( 4 ))
regslice_both_in_strm_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_strm_TKEEP),
    .vld_in(in_strm_TVALID),
    .ack_in(regslice_both_in_strm_V_keep_V_U_ack_in),
    .data_out(in_strm_TKEEP_int_regslice),
    .vld_out(regslice_both_in_strm_V_keep_V_U_vld_out),
    .ack_out(in_strm_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_strm_V_keep_V_U_apdone_blk)
);

gaussian_regslice_both #(
    .DataWidth( 4 ))
regslice_both_in_strm_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_strm_TSTRB),
    .vld_in(in_strm_TVALID),
    .ack_in(regslice_both_in_strm_V_strb_V_U_ack_in),
    .data_out(in_strm_TSTRB_int_regslice),
    .vld_out(regslice_both_in_strm_V_strb_V_U_vld_out),
    .ack_out(in_strm_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_strm_V_strb_V_U_apdone_blk)
);

gaussian_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_strm_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_strm_TUSER),
    .vld_in(in_strm_TVALID),
    .ack_in(regslice_both_in_strm_V_user_V_U_ack_in),
    .data_out(in_strm_TUSER_int_regslice),
    .vld_out(regslice_both_in_strm_V_user_V_U_vld_out),
    .ack_out(in_strm_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_strm_V_user_V_U_apdone_blk)
);

gaussian_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_strm_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_strm_TLAST),
    .vld_in(in_strm_TVALID),
    .ack_in(regslice_both_in_strm_V_last_V_U_ack_in),
    .data_out(in_strm_TLAST_int_regslice),
    .vld_out(regslice_both_in_strm_V_last_V_U_vld_out),
    .ack_out(in_strm_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_strm_V_last_V_U_apdone_blk)
);

gaussian_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_strm_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_strm_TID),
    .vld_in(in_strm_TVALID),
    .ack_in(regslice_both_in_strm_V_id_V_U_ack_in),
    .data_out(in_strm_TID_int_regslice),
    .vld_out(regslice_both_in_strm_V_id_V_U_vld_out),
    .ack_out(in_strm_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_strm_V_id_V_U_apdone_blk)
);

gaussian_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_strm_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_strm_TDEST),
    .vld_in(in_strm_TVALID),
    .ack_in(regslice_both_in_strm_V_dest_V_U_ack_in),
    .data_out(in_strm_TDEST_int_regslice),
    .vld_out(regslice_both_in_strm_V_dest_V_U_vld_out),
    .ack_out(in_strm_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_strm_V_dest_V_U_apdone_blk)
);

gaussian_regslice_both #(
    .DataWidth( 32 ))
regslice_both_out_strm_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_strm_TDATA_int_regslice),
    .vld_in(out_strm_TVALID_int_regslice),
    .ack_in(out_strm_TREADY_int_regslice),
    .data_out(out_strm_TDATA),
    .vld_out(regslice_both_out_strm_V_data_V_U_vld_out),
    .ack_out(out_strm_TREADY),
    .apdone_blk(regslice_both_out_strm_V_data_V_U_apdone_blk)
);

gaussian_regslice_both #(
    .DataWidth( 4 ))
regslice_both_out_strm_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(p_phi_reg_314),
    .vld_in(out_strm_TVALID_int_regslice),
    .ack_in(regslice_both_out_strm_V_keep_V_U_ack_in_dummy),
    .data_out(out_strm_TKEEP),
    .vld_out(regslice_both_out_strm_V_keep_V_U_vld_out),
    .ack_out(out_strm_TREADY),
    .apdone_blk(regslice_both_out_strm_V_keep_V_U_apdone_blk)
);

gaussian_regslice_both #(
    .DataWidth( 4 ))
regslice_both_out_strm_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(p_phi22_reg_327),
    .vld_in(out_strm_TVALID_int_regslice),
    .ack_in(regslice_both_out_strm_V_strb_V_U_ack_in_dummy),
    .data_out(out_strm_TSTRB),
    .vld_out(regslice_both_out_strm_V_strb_V_U_vld_out),
    .ack_out(out_strm_TREADY),
    .apdone_blk(regslice_both_out_strm_V_strb_V_U_apdone_blk)
);

gaussian_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_strm_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(p_phi23_reg_340),
    .vld_in(out_strm_TVALID_int_regslice),
    .ack_in(regslice_both_out_strm_V_user_V_U_ack_in_dummy),
    .data_out(out_strm_TUSER),
    .vld_out(regslice_both_out_strm_V_user_V_U_vld_out),
    .ack_out(out_strm_TREADY),
    .apdone_blk(regslice_both_out_strm_V_user_V_U_apdone_blk)
);

gaussian_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_strm_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(val_last_V_reg_1456_pp3_iter1_reg),
    .vld_in(out_strm_TVALID_int_regslice),
    .ack_in(regslice_both_out_strm_V_last_V_U_ack_in_dummy),
    .data_out(out_strm_TLAST),
    .vld_out(regslice_both_out_strm_V_last_V_U_vld_out),
    .ack_out(out_strm_TREADY),
    .apdone_blk(regslice_both_out_strm_V_last_V_U_apdone_blk)
);

gaussian_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_strm_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(p_phi24_reg_353),
    .vld_in(out_strm_TVALID_int_regslice),
    .ack_in(regslice_both_out_strm_V_id_V_U_ack_in_dummy),
    .data_out(out_strm_TID),
    .vld_out(regslice_both_out_strm_V_id_V_U_vld_out),
    .ack_out(out_strm_TREADY),
    .apdone_blk(regslice_both_out_strm_V_id_V_U_apdone_blk)
);

gaussian_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_strm_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(p_phi25_reg_366),
    .vld_in(out_strm_TVALID_int_regslice),
    .ack_in(regslice_both_out_strm_V_dest_V_U_ack_in_dummy),
    .data_out(out_strm_TDEST),
    .vld_out(regslice_both_out_strm_V_dest_V_U_vld_out),
    .ack_out(out_strm_TREADY),
    .apdone_blk(regslice_both_out_strm_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp2_flush_enable)) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp3_flush_enable)) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if (((1'b1 == ap_CS_fsm_state8) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (1'b1 == ap_condition_pp3_exit_iter2_state11)))) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter2_state11))) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp3_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_flatten7_reg_448 <= 19'd0;
    end else if (((icmp_ln50_fu_821_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        indvar_flatten7_reg_448 <= add_ln50_fu_789_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvar_flatten_reg_379 <= 3'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln32_fu_613_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        indvar_flatten_reg_379 <= add_ln32_fu_607_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        px_1_reg_303 <= 10'd0;
    end else if ((~((icmp_ln25_fu_576_p2 == 1'd0) & (in_strm_TVALID_int_regslice == 1'b0)) & (icmp_ln25_fu_576_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        px_1_reg_303 <= add_ln25_fu_570_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        px_2_reg_470 <= 10'd0;
    end else if (((icmp_ln50_reg_1405 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        px_2_reg_470 <= add_ln58_reg_1444;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        px_reg_292 <= 10'd510;
    end else if ((~((icmp_ln18_fu_553_p2 == 1'd0) & (in_strm_TVALID_int_regslice == 1'b0)) & (icmp_ln18_fu_553_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        px_reg_292 <= add_ln18_fu_559_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        py_reg_459 <= 10'd0;
    end else if (((icmp_ln50_fu_821_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        py_reg_459 <= select_ln50_fu_894_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        read_cnt_fu_188 <= 32'd514;
    end else if (((icmp_ln69_fu_956_p2 == 1'd1) & (icmp_ln50_fu_821_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        read_cnt_fu_188 <= read_cnt_1_fu_962_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_272)) begin
        if (((icmp_ln69_fu_956_p2 == 1'd0) & (icmp_ln50_fu_821_p2 == 1'd0))) begin
            val_in_reg_492 <= 32'd0;
        end else if (((icmp_ln69_fu_956_p2 == 1'd1) & (icmp_ln50_fu_821_p2 == 1'd0))) begin
            val_in_reg_492 <= in_strm_TDATA_int_regslice;
        end else if ((1'b1 == 1'b1)) begin
            val_in_reg_492 <= ap_phi_reg_pp3_iter0_val_in_reg_492;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        val_last_V_1_reg_481 <= 1'd0;
    end else if (((icmp_ln50_reg_1405 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        val_last_V_1_reg_481 <= val_last_V_reg_1456;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        window_1_0_reg_514 <= trunc_ln32_reg_1332;
    end else if (((icmp_ln50_reg_1405 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        window_1_0_reg_514 <= window_1_1_fu_985_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        window_1_1_in_reg_504 <= window_1_2_1_reg_436;
    end else if (((icmp_ln50_reg_1405_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        window_1_1_in_reg_504 <= window_1_2_reg_1489;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        window_2_0_reg_535 <= window_2_1_1_reg_424;
    end else if (((ap_enable_reg_pp3_iter3 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln50_reg_1405_pp3_iter2_reg == 1'd0))) begin
        window_2_0_reg_535 <= window_2_1_reg_523;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        window_2_1_reg_523 <= window_2_2_1_reg_412;
    end else if (((ap_enable_reg_pp3_iter3 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln50_reg_1405_pp3_iter2_reg == 1'd0))) begin
        window_2_1_reg_523 <= val_in_reg_492_pp3_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        wx_reg_390 <= 2'd1;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln32_fu_613_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        wx_reg_390 <= add_ln33_fu_659_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        wy_reg_401 <= 2'd1;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln32_reg_1299 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        wy_reg_401 <= select_ln32_1_fu_681_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_fu_821_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        add_ln58_reg_1444 <= add_ln58_fu_914_p2;
        val_last_V_reg_1456 <= val_last_V_fu_940_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        add_ln58_reg_1444_pp3_iter1_reg <= add_ln58_reg_1444;
        empty_18_reg_1400 <= empty_18_fu_807_p2;
        empty_18_reg_1400_pp3_iter1_reg <= empty_18_reg_1400;
        icmp_ln19_reg_1437_pp3_iter1_reg <= icmp_ln19_reg_1437;
        icmp_ln50_reg_1405 <= icmp_ln50_fu_821_p2;
        icmp_ln50_reg_1405_pp3_iter1_reg <= icmp_ln50_reg_1405;
        icmp_ln51_reg_1409_pp3_iter1_reg <= icmp_ln51_reg_1409;
        p_mid1_reg_1421_pp3_iter1_reg <= p_mid1_reg_1421;
        select_ln41_5_reg_1426_pp3_iter1_reg <= select_ln41_5_reg_1426;
        val_in_reg_492_pp3_iter1_reg <= val_in_reg_492;
        val_last_V_reg_1456_pp3_iter1_reg <= val_last_V_reg_1456;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_fu_821_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln19_reg_1437 <= icmp_ln19_fu_908_p2;
        icmp_ln51_reg_1409 <= icmp_ln51_fu_830_p2;
        linebuf_0_addr_2_reg_1466 <= zext_ln51_fu_902_p1;
        p_mid1_reg_1421 <= p_mid1_fu_872_p2;
        select_ln41_2_reg_1414 <= select_ln41_2_fu_864_p3;
        select_ln41_5_reg_1426 <= select_ln41_5_fu_886_p3;
        tmp_2_reg_1450 <= add_ln58_fu_914_p2[32'd9];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln32_reg_1299 <= icmp_ln32_fu_613_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln32_fu_613_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln33_reg_1303 <= icmp_ln33_fu_619_p2;
        icmp_ln35_1_reg_1319 <= icmp_ln35_1_fu_653_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp3_stage0_11001)) begin
        icmp_ln50_reg_1405_pp3_iter2_reg <= icmp_ln50_reg_1405_pp3_iter1_reg;
        val_in_reg_492_pp3_iter2_reg <= val_in_reg_492_pp3_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln25_fu_576_p2 == 1'd0) & (in_strm_TVALID_int_regslice == 1'b0)) & (icmp_ln25_fu_576_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        p_phi22_reg_327 <= in_strm_TSTRB_int_regslice;
        p_phi23_reg_340 <= in_strm_TUSER_int_regslice;
        p_phi24_reg_353 <= in_strm_TID_int_regslice;
        p_phi25_reg_366 <= in_strm_TDEST_int_regslice;
        p_phi_reg_314 <= in_strm_TKEEP_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_reg_1405 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        select_ln19_1_reg_1482 <= select_ln19_1_fu_1113_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        trunc_ln32_reg_1332 <= trunc_ln32_fu_668_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        window_0_0_1_fu_168 <= window_0_0_fu_172;
        window_0_0_fu_172 <= window_0_1_fu_176;
        window_1_0_1_fu_180 <= window_1_0_reg_514;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_reg_1405 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        window_0_1_fu_176 <= linebuf_0_q1;
        window_1_2_reg_1489 <= linebuf_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln32_reg_1299 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        window_1_2_1_reg_436 <= window_2_2_15_fu_763_p3;
        window_2_1_1_reg_424 <= window_2_2_14_fu_755_p3;
        window_2_2_1_reg_412 <= window_2_2_13_fu_747_p3;
        window_2_2_2_fu_164 <= window_2_2_16_fu_771_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        window_2_0_1_fu_184 <= ap_phi_mux_window_2_0_phi_fu_538_p4;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln32_fu_613_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_condition_pp2_flush_enable = 1'b1;
    end else begin
        ap_condition_pp2_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_condition_pp3_exit_iter2_state11 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter2_state11 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_fu_821_p2 == 1'd1) & (1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        ap_condition_pp3_flush_enable = 1'b1;
    end else begin
        ap_condition_pp3_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_out_strm_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_1405 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        ap_phi_mux_px_2_phi_fu_474_p4 = add_ln58_reg_1444;
    end else begin
        ap_phi_mux_px_2_phi_fu_474_p4 = px_2_reg_470;
    end
end

always @ (*) begin
    if ((icmp_ln50_fu_821_p2 == 1'd0)) begin
        if ((icmp_ln69_fu_956_p2 == 1'd0)) begin
            ap_phi_mux_val_in_phi_fu_495_p4 = 32'd0;
        end else if ((icmp_ln69_fu_956_p2 == 1'd1)) begin
            ap_phi_mux_val_in_phi_fu_495_p4 = in_strm_TDATA_int_regslice;
        end else begin
            ap_phi_mux_val_in_phi_fu_495_p4 = ap_phi_reg_pp3_iter0_val_in_reg_492;
        end
    end else begin
        ap_phi_mux_val_in_phi_fu_495_p4 = ap_phi_reg_pp3_iter0_val_in_reg_492;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_1405 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        ap_phi_mux_val_last_V_1_phi_fu_485_p4 = val_last_V_reg_1456;
    end else begin
        ap_phi_mux_val_last_V_1_phi_fu_485_p4 = val_last_V_1_reg_481;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_1405_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0))) begin
        ap_phi_mux_window_1_1_in_phi_fu_507_p4 = window_1_2_reg_1489;
    end else begin
        ap_phi_mux_window_1_1_in_phi_fu_507_p4 = window_1_1_in_reg_504;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter3 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (icmp_ln50_reg_1405_pp3_iter2_reg == 1'd0))) begin
        ap_phi_mux_window_2_0_phi_fu_538_p4 = window_2_1_reg_523;
    end else begin
        ap_phi_mux_window_2_0_phi_fu_538_p4 = window_2_0_reg_535;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter3 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (icmp_ln50_reg_1405_pp3_iter2_reg == 1'd0))) begin
        ap_phi_mux_window_2_1_phi_fu_526_p4 = val_in_reg_492_pp3_iter2_reg;
    end else begin
        ap_phi_mux_window_2_1_phi_fu_526_p4 = window_2_1_reg_523;
    end
end

always @ (*) begin
    if (((regslice_both_out_strm_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln69_fu_956_p2 == 1'd1) & (icmp_ln50_fu_821_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((icmp_ln25_fu_576_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln18_fu_553_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        in_strm_TDATA_blk_n = in_strm_TVALID_int_regslice;
    end else begin
        in_strm_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_predicate_op161_read_state9 == 1'b1)) | (~((icmp_ln25_fu_576_p2 == 1'd0) & (in_strm_TVALID_int_regslice == 1'b0)) & (icmp_ln25_fu_576_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | (~((icmp_ln18_fu_553_p2 == 1'd0) & (in_strm_TVALID_int_regslice == 1'b0)) & (icmp_ln18_fu_553_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        in_strm_TREADY_int_regslice = 1'b1;
    end else begin
        in_strm_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        linebuf_0_address0 = linebuf_0_addr_2_reg_1466;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        linebuf_0_address0 = zext_ln35_fu_647_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        linebuf_0_address0 = zext_ln18_fu_565_p1;
    end else begin
        linebuf_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | (~((icmp_ln18_fu_553_p2 == 1'd0) & (in_strm_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        linebuf_0_ce0 = 1'b1;
    end else begin
        linebuf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        linebuf_0_ce1 = 1'b1;
    end else begin
        linebuf_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        linebuf_0_d0 = linebuf_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        linebuf_0_d0 = in_strm_TDATA_int_regslice;
    end else begin
        linebuf_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln50_reg_1405 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | (~((icmp_ln18_fu_553_p2 == 1'd0) & (in_strm_TVALID_int_regslice == 1'b0)) & (icmp_ln18_fu_553_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        linebuf_0_we0 = 1'b1;
    end else begin
        linebuf_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_fu_821_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        linebuf_1_address0 = zext_ln51_fu_902_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        linebuf_1_address0 = zext_ln35_fu_647_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        linebuf_1_address0 = zext_ln25_fu_582_p1;
    end else begin
        linebuf_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln50_fu_821_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | (~((icmp_ln25_fu_576_p2 == 1'd0) & (in_strm_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state4)))) begin
        linebuf_1_ce0 = 1'b1;
    end else begin
        linebuf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_fu_821_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        linebuf_1_d0 = ap_phi_mux_val_in_phi_fu_495_p4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        linebuf_1_d0 = in_strm_TDATA_int_regslice;
    end else begin
        linebuf_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln50_fu_821_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | (~((icmp_ln25_fu_576_p2 == 1'd0) & (in_strm_TVALID_int_regslice == 1'b0)) & (icmp_ln25_fu_576_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        linebuf_1_we0 = 1'b1;
    end else begin
        linebuf_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter3 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (icmp_ln50_reg_1405_pp3_iter2_reg == 1'd0)) | ((icmp_ln50_reg_1405_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0)))) begin
        out_strm_TDATA_blk_n = out_strm_TREADY_int_regslice;
    end else begin
        out_strm_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_1405_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        out_strm_TVALID_int_regslice = 1'b1;
    end else begin
        out_strm_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln18_fu_553_p2 == 1'd0) & (in_strm_TVALID_int_regslice == 1'b0)) & (icmp_ln18_fu_553_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((icmp_ln18_fu_553_p2 == 1'd0) & (in_strm_TVALID_int_regslice == 1'b0)) & (icmp_ln18_fu_553_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if ((~((icmp_ln25_fu_576_p2 == 1'd0) & (in_strm_TVALID_int_regslice == 1'b0)) & (icmp_ln25_fu_576_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((icmp_ln25_fu_576_p2 == 1'd0) & (in_strm_TVALID_int_regslice == 1'b0)) & (icmp_ln25_fu_576_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b1) & (ap_enable_reg_pp2_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b1) & (ap_enable_reg_pp2_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((regslice_both_out_strm_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln18_fu_559_p2 = (px_reg_292 + 10'd1);

assign add_ln25_fu_570_p2 = (px_1_reg_303 + 10'd1);

assign add_ln27_fu_1227_p2 = ($signed(sext_ln23_fu_1223_p1) + $signed(29'd1));

assign add_ln32_1_fu_675_p2 = (wy_reg_401 + 2'd1);

assign add_ln32_fu_607_p2 = (indvar_flatten_reg_379 + 3'd1);

assign add_ln33_fu_659_p2 = (select_ln32_fu_625_p3 + 2'd1);

assign add_ln35_fu_637_p2 = ($signed(zext_ln33_fu_633_p1) + $signed(3'd5));

assign add_ln50_fu_789_p2 = (indvar_flatten7_reg_448 + 19'd1);

assign add_ln58_fu_914_p2 = (select_ln41_fu_836_p3 + 10'd1);

assign add_ln59_1_fu_1048_p2 = (window_0_1_fu_176 + val_out_1_0_1_fu_1031_p3);

assign add_ln59_2_fu_1070_p2 = (shl_ln59_1_fu_1062_p3 + select_ln58_1_fu_1054_p3);

assign add_ln59_3_fu_1095_p2 = (shl_ln59_2_fu_1087_p3 + select_ln19_fu_1076_p3);

assign add_ln59_4_fu_1107_p2 = (shl_ln59_3_fu_1101_p2 + add_ln59_3_fu_1095_p2);

assign add_ln59_5_fu_1148_p2 = (window_2_0_1_fu_184 + select_ln19_1_reg_1482);

assign add_ln59_6_fu_1166_p2 = (shl_ln59_4_fu_1160_p2 + select_ln58_2_fu_1153_p3);

assign add_ln59_7_fu_1191_p2 = (ap_phi_mux_window_2_1_phi_fu_526_p4 + val_out_1_2_1_fu_1172_p3);

assign add_ln59_fu_1025_p2 = (shl_ln59_fu_1019_p2 + select_ln58_fu_1011_p3);

assign and_ln19_1_fu_1043_p2 = (xor_ln19_fu_1038_p2 & select_ln41_2_reg_1414);

assign and_ln19_2_fu_1143_p2 = (xor_ln41_fu_1138_p2 & icmp_ln19_reg_1437_pp3_iter1_reg);

assign and_ln19_fu_1007_p2 = (select_ln41_2_reg_1414 & icmp_ln19_reg_1437);

assign and_ln64_fu_934_p2 = (select_ln41_1_fu_850_p3 & icmp_ln64_fu_928_p2);

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_01001 = (((ap_enable_reg_pp3_iter3 == 1'b1) & (out_strm_TREADY_int_regslice == 1'b0) & (icmp_ln50_reg_1405_pp3_iter2_reg == 1'd0)) | ((icmp_ln50_reg_1405_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (out_strm_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (ap_predicate_op161_read_state9 == 1'b1) & (in_strm_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp3_stage0_11001 = (((ap_enable_reg_pp3_iter3 == 1'b1) & ((1'b1 == ap_block_state12_io) | ((out_strm_TREADY_int_regslice == 1'b0) & (icmp_ln50_reg_1405_pp3_iter2_reg == 1'd0)))) | ((ap_enable_reg_pp3_iter2 == 1'b1) & ((1'b1 == ap_block_state11_io) | ((icmp_ln50_reg_1405_pp3_iter1_reg == 1'd0) & (out_strm_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (ap_predicate_op161_read_state9 == 1'b1) & (in_strm_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = (((ap_enable_reg_pp3_iter3 == 1'b1) & ((1'b1 == ap_block_state12_io) | ((out_strm_TREADY_int_regslice == 1'b0) & (icmp_ln50_reg_1405_pp3_iter2_reg == 1'd0)))) | ((ap_enable_reg_pp3_iter2 == 1'b1) & ((1'b1 == ap_block_state11_io) | ((icmp_ln50_reg_1405_pp3_iter1_reg == 1'd0) & (out_strm_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (ap_predicate_op161_read_state9 == 1'b1) & (in_strm_TVALID_int_regslice == 1'b0)));
end

assign ap_block_state10_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_io = ((icmp_ln50_reg_1405_pp3_iter1_reg == 1'd0) & (out_strm_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state11_pp3_stage0_iter2 = ((icmp_ln50_reg_1405_pp3_iter1_reg == 1'd0) & (out_strm_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state12_io = ((out_strm_TREADY_int_regslice == 1'b0) & (icmp_ln50_reg_1405_pp3_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_block_state12_pp3_stage0_iter3 = ((out_strm_TREADY_int_regslice == 1'b0) & (icmp_ln50_reg_1405_pp3_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_block_state2 = ((icmp_ln18_fu_553_p2 == 1'd0) & (in_strm_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((icmp_ln25_fu_576_p2 == 1'd0) & (in_strm_TVALID_int_regslice == 1'b0));
end

assign ap_block_state6_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp3_stage0_iter0 = ((ap_predicate_op161_read_state9 == 1'b1) & (in_strm_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_condition_272 = ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0));
end

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_phi_reg_pp3_iter0_val_in_reg_492 = 'bx;

always @ (*) begin
    ap_predicate_op161_read_state9 = ((icmp_ln69_fu_956_p2 == 1'd1) & (icmp_ln50_fu_821_p2 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cmp63_fu_795_p2 = ((py_reg_459 == 10'd511) ? 1'b1 : 1'b0);

assign cmp63_mid1_fu_844_p2 = ((empty_18_fu_807_p2 == 10'd511) ? 1'b1 : 1'b0);

assign cmp_i_0_fu_801_p2 = ((py_reg_459 != 10'd0) ? 1'b1 : 1'b0);

assign cmp_i_0_mid1_fu_858_p2 = ((empty_18_fu_807_p2 != 10'd0) ? 1'b1 : 1'b0);

assign empty_18_fu_807_p2 = (py_reg_459 + 10'd1);

assign icmp_ln18_fu_553_p2 = ((px_reg_292 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_908_p2 = ((select_ln41_fu_836_p3 != 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_576_p2 = ((px_1_reg_303 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_613_p2 = ((indvar_flatten_reg_379 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_619_p2 = ((wx_reg_390 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln35_1_fu_653_p2 = ((select_ln32_fu_625_p3 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln35_2_fu_698_p2 = ((wy_reg_401 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_692_p2 = ((wy_reg_401 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_821_p2 = ((indvar_flatten7_reg_448 == 19'd262144) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_830_p2 = ((ap_phi_mux_px_2_phi_fu_474_p4 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_928_p2 = ((select_ln41_fu_836_p3 == 10'd511) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_956_p2 = (($signed(tmp_5_fu_946_p4) < $signed(14'd1)) ? 1'b1 : 1'b0);

assign in_strm_TREADY = regslice_both_in_strm_V_data_V_U_ack_in;

assign linebuf_0_address1 = zext_ln51_fu_902_p1;

assign or_ln19_fu_1178_p2 = (select_ln41_3_fu_1133_p3 | add_ln58_reg_1444_pp3_iter1_reg);

assign out_strm_TDATA_int_regslice = $signed(val_data_V_fu_1233_p3);

assign out_strm_TVALID = regslice_both_out_strm_V_data_V_U_vld_out;

assign p_mid1_fu_872_p2 = (py_reg_459 + 10'd2);

assign read_cnt_1_fu_962_p2 = (read_cnt_fu_188 + 32'd1);

assign select_ln19_1_fu_1113_p3 = ((tmp_2_reg_1450[0:0] == 1'b1) ? add_ln59_3_fu_1095_p2 : add_ln59_4_fu_1107_p2);

assign select_ln19_fu_1076_p3 = ((icmp_ln19_reg_1437[0:0] == 1'b1) ? add_ln59_2_fu_1070_p2 : select_ln58_1_fu_1054_p3);

assign select_ln32_1_fu_681_p3 = ((icmp_ln33_reg_1303[0:0] == 1'b1) ? add_ln32_1_fu_675_p2 : wy_reg_401);

assign select_ln32_2_fu_704_p3 = ((icmp_ln33_reg_1303[0:0] == 1'b1) ? icmp_ln35_fu_692_p2 : icmp_ln35_2_fu_698_p2);

assign select_ln32_fu_625_p3 = ((icmp_ln33_fu_619_p2[0:0] == 1'b1) ? 2'd1 : wx_reg_390);

assign select_ln41_1_fu_850_p3 = ((icmp_ln51_fu_830_p2[0:0] == 1'b1) ? cmp63_mid1_fu_844_p2 : cmp63_fu_795_p2);

assign select_ln41_2_fu_864_p3 = ((icmp_ln51_fu_830_p2[0:0] == 1'b1) ? cmp_i_0_mid1_fu_858_p2 : cmp_i_0_fu_801_p2);

assign select_ln41_3_fu_1133_p3 = ((icmp_ln51_reg_1409_pp3_iter1_reg[0:0] == 1'b1) ? p_mid1_reg_1421_pp3_iter1_reg : empty_18_reg_1400_pp3_iter1_reg);

assign select_ln41_5_fu_886_p3 = ((icmp_ln51_fu_830_p2[0:0] == 1'b1) ? tmp_1_fu_878_p3 : tmp_fu_813_p3);

assign select_ln41_fu_836_p3 = ((icmp_ln51_fu_830_p2[0:0] == 1'b1) ? 10'd0 : ap_phi_mux_px_2_phi_fu_474_p4);

assign select_ln50_fu_894_p3 = ((icmp_ln51_fu_830_p2[0:0] == 1'b1) ? empty_18_fu_807_p2 : py_reg_459);

assign select_ln58_1_fu_1054_p3 = ((and_ln19_1_fu_1043_p2[0:0] == 1'b1) ? add_ln59_1_fu_1048_p2 : val_out_1_0_1_fu_1031_p3);

assign select_ln58_2_fu_1153_p3 = ((and_ln19_2_fu_1143_p2[0:0] == 1'b1) ? add_ln59_5_fu_1148_p2 : select_ln19_1_reg_1482);

assign select_ln58_3_fu_1197_p3 = ((tmp_3_fu_1183_p3[0:0] == 1'b1) ? val_out_1_2_1_fu_1172_p3 : add_ln59_7_fu_1191_p2);

assign select_ln58_fu_1011_p3 = ((and_ln19_fu_1007_p2[0:0] == 1'b1) ? window_0_0_1_fu_168 : 32'd0);

assign sext_ln23_fu_1223_p1 = $signed(x_assign_1_fu_1213_p4);

assign sext_ln35_fu_643_p1 = $signed(add_ln35_fu_637_p2);

assign shl_ln59_1_fu_1062_p3 = {{window_1_0_1_fu_180}, {1'd0}};

assign shl_ln59_2_fu_1087_p3 = {{trunc_ln59_fu_1083_p1}, {2'd0}};

assign shl_ln59_3_fu_1101_p2 = ap_phi_mux_window_1_1_in_phi_fu_507_p4 << 32'd1;

assign shl_ln59_4_fu_1160_p2 = ap_phi_mux_window_2_0_phi_fu_538_p4 << 32'd1;

assign shl_ln59_fu_1019_p2 = window_0_0_fu_172 << 32'd1;

assign tmp_1_fu_878_p3 = p_mid1_fu_872_p2[32'd9];

assign tmp_3_fu_1183_p3 = or_ln19_fu_1178_p2[32'd9];

assign tmp_4_fu_1205_p3 = select_ln58_3_fu_1197_p3[32'd3];

assign tmp_5_fu_946_p4 = {{read_cnt_fu_188[31:18]}};

assign tmp_fu_813_p3 = empty_18_fu_807_p2[32'd9];

assign trunc_ln32_1_fu_688_p1 = select_ln32_1_fu_681_p3[0:0];

assign trunc_ln32_fu_668_p1 = window_2_2_2_fu_164[30:0];

assign trunc_ln59_fu_1083_p1 = window_1_0_reg_514[29:0];

assign val_data_V_fu_1233_p3 = ((tmp_4_fu_1205_p3[0:0] == 1'b1) ? add_ln27_fu_1227_p2 : sext_ln23_fu_1223_p1);

assign val_last_V_fu_940_p2 = (ap_phi_mux_val_last_V_1_phi_fu_485_p4 | and_ln64_fu_934_p2);

assign val_out_1_0_1_fu_1031_p3 = ((select_ln41_2_reg_1414[0:0] == 1'b1) ? add_ln59_fu_1025_p2 : 32'd0);

assign val_out_1_2_1_fu_1172_p3 = ((select_ln41_5_reg_1426_pp3_iter1_reg[0:0] == 1'b1) ? select_ln19_1_reg_1482 : add_ln59_6_fu_1166_p2);

assign window_1_1_1_fu_711_p3 = ((trunc_ln32_1_fu_688_p1[0:0] == 1'b1) ? linebuf_0_q0 : linebuf_1_q0);

assign window_1_1_fu_985_p1 = ap_phi_mux_window_1_1_in_phi_fu_507_p4[30:0];

assign window_2_2_11_fu_733_p3 = ((icmp_ln35_1_reg_1319[0:0] == 1'b1) ? window_2_2_1_reg_412 : window_1_1_1_fu_711_p3);

assign window_2_2_12_fu_740_p3 = ((icmp_ln35_1_reg_1319[0:0] == 1'b1) ? window_1_1_1_fu_711_p3 : window_2_1_1_reg_424);

assign window_2_2_13_fu_747_p3 = ((select_ln32_2_fu_704_p3[0:0] == 1'b1) ? window_2_2_1_reg_412 : window_2_2_11_fu_733_p3);

assign window_2_2_14_fu_755_p3 = ((select_ln32_2_fu_704_p3[0:0] == 1'b1) ? window_2_1_1_reg_424 : window_2_2_12_fu_740_p3);

assign window_2_2_15_fu_763_p3 = ((select_ln32_2_fu_704_p3[0:0] == 1'b1) ? window_2_2_fu_719_p3 : window_1_2_1_reg_436);

assign window_2_2_16_fu_771_p3 = ((select_ln32_2_fu_704_p3[0:0] == 1'b1) ? window_2_2_9_fu_726_p3 : window_2_2_2_fu_164);

assign window_2_2_9_fu_726_p3 = ((icmp_ln35_1_reg_1319[0:0] == 1'b1) ? window_1_1_1_fu_711_p3 : window_2_2_2_fu_164);

assign window_2_2_fu_719_p3 = ((icmp_ln35_1_reg_1319[0:0] == 1'b1) ? window_1_2_1_reg_436 : window_1_1_1_fu_711_p3);

assign x_assign_1_fu_1213_p4 = {{select_ln58_3_fu_1197_p3[31:4]}};

assign xor_ln19_fu_1038_p2 = (tmp_2_reg_1450 ^ 1'd1);

assign xor_ln41_fu_1138_p2 = (select_ln41_5_reg_1426_pp3_iter1_reg ^ 1'd1);

assign zext_ln18_fu_565_p1 = px_reg_292;

assign zext_ln25_fu_582_p1 = px_1_reg_303;

assign zext_ln33_fu_633_p1 = select_ln32_fu_625_p3;

assign zext_ln35_fu_647_p1 = $unsigned(sext_ln35_fu_643_p1);

assign zext_ln51_fu_902_p1 = select_ln41_fu_836_p3;

endmodule //gaussian
